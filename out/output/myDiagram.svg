<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="3623px" preserveAspectRatio="none" style="width:13052px;height:3623px;background:#FFFFFF;" version="1.1" viewBox="0 0 13052 3623" width="13052px" zoomAndPan="magnify"><defs/><g><!--MD5=[e908f994a210a61149a61e67943ccb7d]
class DataWarperPROTOBUF_FINAL--><g id="elem_DataWarperPROTOBUF_FINAL"><rect codeLine="8" fill="#F1F1F1" height="2052.5156" id="DataWarperPROTOBUF_FINAL" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1237" x="9" y="7"/><ellipse cx="521.75" cy="23" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M524.7188,28.6406 Q524.1406,28.9375 523.5,29.0781 Q522.8594,29.2344 522.1563,29.2344 Q519.6563,29.2344 518.3281,27.5938 Q517.0156,25.9375 517.0156,22.8125 Q517.0156,19.6875 518.3281,18.0313 Q519.6563,16.375 522.1563,16.375 Q522.8594,16.375 523.5,16.5313 Q524.1563,16.6875 524.7188,16.9844 L524.7188,19.7031 Q524.0938,19.125 523.5,18.8594 Q522.9063,18.5781 522.2813,18.5781 Q520.9375,18.5781 520.25,19.6563 Q519.5625,20.7188 519.5625,22.8125 Q519.5625,24.9063 520.25,25.9844 Q520.9375,27.0469 522.2813,27.0469 Q522.9063,27.0469 523.5,26.7813 Q524.0938,26.5 524.7188,25.9219 L524.7188,28.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="542.25" y="27.8467">DataWarperPROTOBUF_FINAL</text><line style="stroke:#181818;stroke-width:0.5;" x1="10" x2="1245" y1="39" y2="39"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="49.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="363" x="29" y="55.9951">_oneof_case_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="65.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="29" y="72.292">header_ : ::header*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="82.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="29" y="88.5889">body_ : BodyUnion</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="98.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="29" y="104.8857">: friend struct::TableStruct_DataWarper_2eproto</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="114.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="67" x="29" y="121.1826">type_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="131.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="29" y="137.4795">_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize</text><ellipse cx="20" cy="150.4297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="267" x="29" y="153.7764">ackFrame : static constexpr frameType</text><ellipse cx="20" cy="166.7266" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="313" x="29" y="170.0732">announceFrame : static constexpr frameType</text><ellipse cx="20" cy="183.0234" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="292" x="29" y="186.3701">conflictFrame : static constexpr frameType</text><ellipse cx="20" cy="199.3203" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="273" x="29" y="202.667">dataFrame : static constexpr frameType</text><ellipse cx="20" cy="215.6172" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="310" x="29" y="218.9639">frameType_MAX : static constexpr frameType</text><ellipse cx="20" cy="231.9141" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="305" x="29" y="235.2607">frameType_MIN : static constexpr frameType</text><ellipse cx="20" cy="248.2109" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="302" x="29" y="251.5576">frameType_ARRAYSIZE : static constexpr int</text><ellipse cx="20" cy="264.5078" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="29" y="267.8545">kIndexInFileMessages : static constexpr int</text><line style="stroke:#181818;stroke-width:0.5;" x1="10" x2="1245" y1="275.1563" y2="275.1563"/><ellipse cx="20" cy="288.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="29" y="292.1514">DataWarper()</text><ellipse cx="20" cy="305.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="29" y="308.4482">DataWarper(const DataWarper&amp; from)</text><ellipse cx="20" cy="321.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="231" x="29" y="324.7451">DataWarper(DataWarper&amp;&amp; from)</text><polygon fill="#FFFF44" points="20,332.6953,24,336.6953,20,340.6953,16,336.6953" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="393" x="29" y="341.042">DataWarper(::PROTOBUF_NAMESPACE_ID::Arena* arena)</text><ellipse cx="20" cy="353.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="29" y="357.3389">~DataWarper()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="367.2891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="350" x="29" y="373.6357">_internal_type() : ::DataWarper_frameType {query}</text><ellipse cx="20" cy="386.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="29" y="389.9326">type() : ::DataWarper_frameType {query}</text><ellipse cx="20" cy="402.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="29" y="406.2295">GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}</text><ellipse cx="20" cy="419.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1211" x="29" y="422.5264">_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="432.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="367" x="29" y="438.8232">_internal_mutable_ackframebody() : ::ackFrameBody*</text><ellipse cx="20" cy="451.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="29" y="455.1201">mutable_ackframebody() : ::ackFrameBody*</text><ellipse cx="20" cy="468.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="297" x="29" y="471.417">release_ackframebody() : ::ackFrameBody*</text><ellipse cx="20" cy="484.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="397" x="29" y="487.7139">unsafe_arena_release_ackframebody() : ::ackFrameBody*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="497.6641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="459" x="29" y="504.0107">_internal_mutable_announceframebody() : ::announceFrameBody*</text><ellipse cx="20" cy="516.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="29" y="520.3076">mutable_announceframebody() : ::announceFrameBody*</text><ellipse cx="20" cy="533.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="389" x="29" y="536.6045">release_announceframebody() : ::announceFrameBody*</text><ellipse cx="20" cy="549.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="489" x="29" y="552.9014">unsafe_arena_release_announceframebody() : ::announceFrameBody*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="562.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="417" x="29" y="569.1982">_internal_mutable_conflictframebody() : ::conflictFrameBody*</text><ellipse cx="20" cy="582.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="352" x="29" y="585.4951">mutable_conflictframebody() : ::conflictFrameBody*</text><ellipse cx="20" cy="598.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="29" y="601.792">release_conflictframebody() : ::conflictFrameBody*</text><ellipse cx="20" cy="614.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="447" x="29" y="618.0889">unsafe_arena_release_conflictframebody() : ::conflictFrameBody*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="628.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="379" x="29" y="634.3857">_internal_mutable_dataframebody() : ::dataFrameBody*</text><ellipse cx="20" cy="647.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="29" y="650.6826">mutable_dataframebody() : ::dataFrameBody*</text><ellipse cx="20" cy="663.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="309" x="29" y="666.9795">release_dataframebody() : ::dataFrameBody*</text><ellipse cx="20" cy="679.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="409" x="29" y="683.2764">unsafe_arena_release_dataframebody() : ::dataFrameBody*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="693.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="29" y="699.5732">_internal_mutable_header() : ::header*</text><ellipse cx="20" cy="712.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="29" y="715.8701">mutable_header() : ::header*</text><ellipse cx="20" cy="728.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="29" y="732.167">release_header() : ::header*</text><ellipse cx="20" cy="745.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="296" x="29" y="748.4639">unsafe_arena_release_header() : ::header*</text><ellipse cx="20" cy="761.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="229" x="29" y="764.7607">default_instance() : DataWarper&amp;</text><ellipse cx="20" cy="777.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="358" x="29" y="781.0576">operator=(const DataWarper&amp; from) : DataWarper&amp;</text><ellipse cx="20" cy="794.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="327" x="29" y="797.3545">operator=(DataWarper&amp;&amp; from) : DataWarper&amp;</text><ellipse cx="20" cy="810.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="202" x="29" y="813.6514">New() : DataWarper* {query}</text><ellipse cx="20" cy="826.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="504" x="29" y="829.9482">New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : DataWarper* {query}</text><ellipse cx="20" cy="842.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="282" x="29" y="846.2451">internal_default_instance() : DataWarper*</text><ellipse cx="20" cy="859.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="29" y="862.542">Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void</text><ellipse cx="20" cy="875.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="29" y="878.8389">IsInitialized() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="888.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="29" y="895.1357">_internal_has_ackframebody() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="905.0859"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="29" y="911.4326">_internal_has_announceframebody() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="921.3828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="333" x="29" y="927.7295">_internal_has_conflictframebody() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="937.6797"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="29" y="944.0264">_internal_has_dataframebody() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="953.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="29" y="960.3232">_internal_has_header() : bool {query}</text><ellipse cx="20" cy="973.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="233" x="29" y="976.6201">frameType_IsValid(int value) : bool</text><ellipse cx="20" cy="989.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="469" x="29" y="992.917">frameType_Parse(const std::string&amp; name, frameType* value) : bool</text><ellipse cx="20" cy="1005.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="29" y="1009.2139">has_ackframebody() : bool {query}</text><ellipse cx="20" cy="1022.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="29" y="1025.5107">has_announceframebody() : bool {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1035.4609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="180" x="29" y="1041.8076">has_body() : bool {query}</text><ellipse cx="20" cy="1054.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="29" y="1058.1045">has_conflictframebody() : bool {query}</text><ellipse cx="20" cy="1071.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="29" y="1074.4014">has_dataframebody() : bool {query}</text><ellipse cx="20" cy="1087.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="29" y="1090.6982">has_header() : bool {query}</text><ellipse cx="20" cy="1103.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="665" x="29" y="1106.9951">_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*</text><ellipse cx="20" cy="1119.9453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="29" y="1123.292">GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="20" cy="1136.2422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="423" x="29" y="1139.5889">descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="20" cy="1152.5391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="543" x="29" y="1155.8857">frameType_descriptor() : const::PROTOBUF_NAMESPACE_ID::EnumDescriptor*</text><ellipse cx="20" cy="1168.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="444" x="29" y="1172.1826">GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1182.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="409" x="29" y="1188.4795">_internal_ackframebody() : const::ackFrameBody&amp; {query}</text><ellipse cx="20" cy="1201.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="344" x="29" y="1204.7764">ackframebody() : const::ackFrameBody&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1214.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="501" x="29" y="1221.0732">_internal_announceframebody() : const::announceFrameBody&amp; {query}</text><ellipse cx="20" cy="1234.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="29" y="1237.3701">announceframebody() : const::announceFrameBody&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1247.3203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="459" x="29" y="1253.667">_internal_conflictframebody() : const::conflictFrameBody&amp; {query}</text><ellipse cx="20" cy="1266.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="29" y="1269.9639">conflictframebody() : const::conflictFrameBody&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1279.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="421" x="29" y="1286.2607">_internal_dataframebody() : const::dataFrameBody&amp; {query}</text><ellipse cx="20" cy="1299.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="29" y="1302.5576">dataframebody() : const::dataFrameBody&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1312.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="29" y="1318.8545">_internal_header() : const::header&amp; {query}</text><ellipse cx="20" cy="1331.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="29" y="1335.1514">header() : const::header&amp; {query}</text><ellipse cx="20" cy="1348.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="29" y="1351.4482">GetCachedSize() : int {query}</text><ellipse cx="20" cy="1364.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="175" x="29" y="1367.7451">body_case() : int {query}</text><ellipse cx="20" cy="1380.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="29" y="1384.042">ByteSizeLong() : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1393.9922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="29" y="1400.3389">GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1410.2891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="29" y="1416.6357">FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece</text><ellipse cx="20" cy="1429.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="334" x="29" y="1432.9326">frameType_Name(T enum_t_value) : std::string&amp;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1442.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="29" y="1449.2295">ArenaDtor(void* object) : void</text><ellipse cx="20" cy="1462.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="29" y="1465.5264">CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="20" cy="1478.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="292" x="29" y="1481.8232">CopyFrom(const DataWarper&amp; from) : void</text><ellipse cx="20" cy="1494.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="29" y="1498.1201">InitAsDefaultInstance() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1508.0703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="29" y="1514.417">InternalSwap(DataWarper* other) : void</text><ellipse cx="20" cy="1527.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="29" y="1530.7139">MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="20" cy="1543.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="301" x="29" y="1547.0107">MergeFrom(const DataWarper&amp; from) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1556.9609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="29" y="1563.3076">RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1573.2578"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="29" y="1579.6045">SetCachedSize(int size) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1589.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="29" y="1595.9014">SharedCtor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1605.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="29" y="1612.1982">SharedDtor() : void</text><ellipse cx="20" cy="1625.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="217" x="29" y="1628.4951">Swap(DataWarper* other) : void</text><ellipse cx="20" cy="1641.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="305" x="29" y="1644.792">UnsafeArenaSwap(DataWarper* other) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1654.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="386" x="29" y="1661.0889">_internal_set_type(::DataWarper_frameType value) : void</text><ellipse cx="20" cy="1674.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="29" y="1677.3857">clear_ackframebody() : void</text><ellipse cx="20" cy="1690.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="29" y="1693.6826">clear_announceframebody() : void</text><ellipse cx="20" cy="1706.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="29" y="1709.9795">clear_body() : void</text><ellipse cx="20" cy="1722.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="29" y="1726.2764">clear_conflictframebody() : void</text><ellipse cx="20" cy="1739.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="29" y="1742.5732">clear_dataframebody() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1752.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="29" y="1758.8701">clear_has_body() : void</text><ellipse cx="20" cy="1771.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="140" x="29" y="1775.167">clear_header() : void</text><ellipse cx="20" cy="1788.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="29" y="1791.4639">clear_type() : void</text><ellipse cx="20" cy="1804.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="466" x="29" y="1807.7607">set_allocated_ackframebody(::ackFrameBody* ackframebody) : void</text><ellipse cx="20" cy="1820.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="604" x="29" y="1824.0576">set_allocated_announceframebody(::announceFrameBody* announceframebody) : void</text><ellipse cx="20" cy="1837.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="541" x="29" y="1840.3545">set_allocated_conflictframebody(::conflictFrameBody* conflictframebody) : void</text><ellipse cx="20" cy="1853.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="484" x="29" y="1856.6514">set_allocated_dataframebody(::dataFrameBody* dataframebody) : void</text><ellipse cx="20" cy="1869.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="317" x="29" y="1872.9482">set_allocated_header(::header* header) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1882.8984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="209" x="29" y="1889.2451">set_has_ackframebody() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1899.1953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="255" x="29" y="1905.542">set_has_announceframebody() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1915.4922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="234" x="29" y="1921.8389">set_has_conflictframebody() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="17" y="1931.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="29" y="1938.1357">set_has_dataframebody() : void</text><ellipse cx="20" cy="1951.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="321" x="29" y="1954.4326">set_type(::DataWarper_frameType value) : void</text><ellipse cx="20" cy="1967.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="306" x="29" y="1970.7295">swap(DataWarper&amp; a, DataWarper&amp; b) : void</text><ellipse cx="20" cy="1983.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="566" x="29" y="1987.0264">unsafe_arena_set_allocated_ackframebody(::ackFrameBody* ackframebody) : void</text><ellipse cx="20" cy="1999.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="704" x="29" y="2003.3232">unsafe_arena_set_allocated_announceframebody(::announceFrameBody* announceframebody) : void</text><ellipse cx="20" cy="2016.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="641" x="29" y="2019.6201">unsafe_arena_set_allocated_conflictframebody(::conflictFrameBody* conflictframebody) : void</text><ellipse cx="20" cy="2032.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="584" x="29" y="2035.917">unsafe_arena_set_allocated_dataframebody(::dataFrameBody* dataframebody) : void</text><ellipse cx="20" cy="2048.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="417" x="29" y="2052.2139">unsafe_arena_set_allocated_header(::header* header) : void</text></g><!--MD5=[0273071107466c7db0085c6ad1e1c679]
class ListenThread_AP--><g id="elem_ListenThread_AP"><rect codeLine="135" fill="#F1F1F1" height="357.6406" id="ListenThread_AP" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1987" x="1196" y="2120"/><ellipse cx="2127.75" cy="2136" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2130.7188,2141.6406 Q2130.1406,2141.9375 2129.5,2142.0781 Q2128.8594,2142.2344 2128.1563,2142.2344 Q2125.6563,2142.2344 2124.3281,2140.5938 Q2123.0156,2138.9375 2123.0156,2135.8125 Q2123.0156,2132.6875 2124.3281,2131.0313 Q2125.6563,2129.375 2128.1563,2129.375 Q2128.8594,2129.375 2129.5,2129.5313 Q2130.1563,2129.6875 2130.7188,2129.9844 L2130.7188,2132.7031 Q2130.0938,2132.125 2129.5,2131.8594 Q2128.9063,2131.5781 2128.2813,2131.5781 Q2126.9375,2131.5781 2126.25,2132.6563 Q2125.5625,2133.7188 2125.5625,2135.8125 Q2125.5625,2137.9063 2126.25,2138.9844 Q2126.9375,2140.0469 2128.2813,2140.0469 Q2128.9063,2140.0469 2129.5,2139.7813 Q2130.0938,2139.5 2130.7188,2138.9219 L2130.7188,2141.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="2148.25" y="2140.8467">ListenThread_AP</text><line style="stroke:#181818;stroke-width:0.5;" x1="1197" x2="3182" y1="2152" y2="2152"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2162.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="144" x="1216" y="2168.9951">status_ : NodeStatus</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2178.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="1216" y="2185.292">window_ : Window_AP&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2195.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="1216" y="2201.5889">listen_flag_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2211.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="1216" y="2217.8857">io_context_ : io_context</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2227.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="1216" y="2234.1826">listen_mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2244.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="1216" y="2250.4795">log_mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2260.4297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="1216" y="2266.7764">status_mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2276.7266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="434" x="1216" y="2283.0732">receive_threads_ : std::map&lt;endpoint_t, ReceiveThread_AP*&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1204" y="2293.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="293" x="1216" y="2299.3701">acceptor_ : unique_ptr&lt;acceptor_t, del_t&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1197" x2="3182" y1="2306.6719" y2="2306.6719"/><ellipse cx="1207" cy="2320.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="568" x="1216" y="2323.667">ListenThread_AP(Window_AP&amp; window, uint16_t port, address ip, QObject* parent)</text><ellipse cx="1207" cy="2336.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="1216" y="2339.9639">~ListenThread_AP()</text><ellipse cx="1207" cy="2352.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="1216" y="2356.2607">getListenFlag() : bool</text><polygon fill="#FFFF44" points="1207,2364.2109,1211,2368.2109,1207,2372.2109,1203,2368.2109" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1961" x="1216" y="2372.5576">messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&amp;, const QString&amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &amp;, const QString &amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton) : signals : void</text><polygon fill="#FFFF44" points="1207,2380.5078,1211,2384.5078,1207,2388.5078,1203,2384.5078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="678" x="1216" y="2388.8545">acceptHandler(const boost::system::error_code&amp; ec, shared_ptr&lt;socket_t&gt; socket_server) : void</text><polygon fill="#FFFF44" points="1207,2396.8047,1211,2400.8047,1207,2404.8047,1203,2400.8047" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="1216" y="2405.1514">appendLogSignal(const QString &amp;) : void</text><polygon fill="#FFFF44" points="1207,2413.1016,1211,2417.1016,1207,2421.1016,1203,2417.1016" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="1216" y="2421.4482">run() : void</text><ellipse cx="1207" cy="2434.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="200" x="1216" y="2437.7451">setListenFlag(bool flag) : void</text><polygon fill="#FFFF44" points="1207,2445.6953,1211,2449.6953,1207,2453.6953,1203,2449.6953" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="1216" y="2454.042">startAccept() : void</text><ellipse cx="1207" cy="2466.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1216" y="2470.3389">stop() : void</text></g><!--MD5=[21ab968d8dd0cd7f40bf626e1196b133]
class NodeInfo--><g id="elem_NodeInfo"><rect codeLine="158" fill="#F1F1F1" height="406.5313" id="NodeInfo" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="809" x="1257" y="3210"/><ellipse cx="1626.25" cy="3226" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1629.2188,3231.6406 Q1628.6406,3231.9375 1628,3232.0781 Q1627.3594,3232.2344 1626.6563,3232.2344 Q1624.1563,3232.2344 1622.8281,3230.5938 Q1621.5156,3228.9375 1621.5156,3225.8125 Q1621.5156,3222.6875 1622.8281,3221.0313 Q1624.1563,3219.375 1626.6563,3219.375 Q1627.3594,3219.375 1628,3219.5313 Q1628.6563,3219.6875 1629.2188,3219.9844 L1629.2188,3222.7031 Q1628.5938,3222.125 1628,3221.8594 Q1627.4063,3221.5781 1626.7813,3221.5781 Q1625.4375,3221.5781 1624.75,3222.6563 Q1624.0625,3223.7188 1624.0625,3225.8125 Q1624.0625,3227.9063 1624.75,3228.9844 Q1625.4375,3230.0469 1626.7813,3230.0469 Q1627.4063,3230.0469 1628,3229.7813 Q1628.5938,3229.5 1629.2188,3228.9219 L1629.2188,3231.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="62" x="1646.75" y="3230.8467">NodeInfo</text><line style="stroke:#181818;stroke-width:0.5;" x1="1258" x2="2065" y1="3242" y2="3242"/><ellipse cx="1268" cy="3255.6484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="95" x="1277" y="3258.9951">time_ : QTime</text><ellipse cx="1268" cy="3271.9453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="1277" y="3275.292">ip_address_ : address</text><ellipse cx="1268" cy="3288.2422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="1277" y="3291.5889">is_send_ : bool</text><ellipse cx="1268" cy="3304.5391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="142" x="1277" y="3307.8857">mac_address_ : byte</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1265" y="3317.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="1277" y="3324.1826">mutex_ : shared_mutex</text><ellipse cx="1268" cy="3337.1328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="1277" y="3340.4795">port_ : uint16_t</text><ellipse cx="1268" cy="3353.4297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="342" x="1277" y="3356.7764">socket_ : weak_ptr&lt;boost::asio::ip::tcp::socket&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1258" x2="2065" y1="3364.0781" y2="3364.0781"/><ellipse cx="1268" cy="3377.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="783" x="1277" y="3381.0732">NodeInfo(byte mac_address, address ip_address, uint16_t port, shared_ptr&lt;boost::asio::ip::tcp::socket&gt; socket)</text><ellipse cx="1268" cy="3394.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="1277" y="3397.3701">NodeInfo(NodeInfo&amp;&amp; node)</text><ellipse cx="1268" cy="3410.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="1277" y="3413.667">NodeInfo(const NodeInfo&amp; node)</text><ellipse cx="1268" cy="3426.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="1277" y="3429.9639">operator=(NodeInfo&amp;&amp; node) : NodeInfo&amp;</text><ellipse cx="1268" cy="3442.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="325" x="1277" y="3446.2607">operator=(const NodeInfo&amp; node) : NodeInfo&amp;</text><ellipse cx="1268" cy="3459.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="1277" y="3462.5576">getTime() : QTime</text><ellipse cx="1268" cy="3475.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="1277" y="3478.8545">isSend() : bool</text><ellipse cx="1268" cy="3491.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="82" x="1277" y="3495.1514">getIP() : ip_t</text><ellipse cx="1268" cy="3508.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="115" x="1277" y="3511.4482">getMac() : mac_t</text><ellipse cx="1268" cy="3524.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="1277" y="3527.7451">getPort() : port_t</text><ellipse cx="1268" cy="3540.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="1277" y="3544.042">setIP(address ip_address) : void</text><ellipse cx="1268" cy="3556.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="1277" y="3560.3389">setMac(byte mac_address) : void</text><ellipse cx="1268" cy="3573.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="1277" y="3576.6357">setPort(uint16_t port) : void</text><ellipse cx="1268" cy="3589.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="1277" y="3592.9326">setSend(bool is_send) : void</text><ellipse cx="1268" cy="3605.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="186" x="1277" y="3609.2295">setTime(QTime time) : void</text></g><!--MD5=[c08a907d48b69d85f672296b1ee312c0]
class NodeStatus--><g id="elem_NodeStatus"><rect codeLine="184" fill="#F1F1F1" height="259.8594" id="NodeStatus" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="554" x="1384.5" y="2890"/><ellipse cx="1616.75" cy="2906" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M1619.7188,2911.6406 Q1619.1406,2911.9375 1618.5,2912.0781 Q1617.8594,2912.2344 1617.1563,2912.2344 Q1614.6563,2912.2344 1613.3281,2910.5938 Q1612.0156,2908.9375 1612.0156,2905.8125 Q1612.0156,2902.6875 1613.3281,2901.0313 Q1614.6563,2899.375 1617.1563,2899.375 Q1617.8594,2899.375 1618.5,2899.5313 Q1619.1563,2899.6875 1619.7188,2899.9844 L1619.7188,2902.7031 Q1619.0938,2902.125 1618.5,2901.8594 Q1617.9063,2901.5781 1617.2813,2901.5781 Q1615.9375,2901.5781 1615.25,2902.6563 Q1614.5625,2903.7188 1614.5625,2905.8125 Q1614.5625,2907.9063 1615.25,2908.9844 Q1615.9375,2910.0469 1617.2813,2910.0469 Q1617.9063,2910.0469 1618.5,2909.7813 Q1619.0938,2909.5 1619.7188,2908.9219 L1619.7188,2911.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="1637.25" y="2910.8467">NodeStatus</text><line style="stroke:#181818;stroke-width:0.5;" x1="1385.5" x2="1937.5" y1="2922" y2="2922"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1392.5" y="2932.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="1404.5" y="2938.9951">lastsend_ : QTime</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1392.5" y="2948.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="114" x="1404.5" y="2955.292">lastmac_ : mac_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1392.5" y="2965.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="1404.5" y="2971.5889">list_mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1392.5" y="2981.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="1404.5" y="2987.8857">mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1392.5" y="2997.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="201" x="1404.5" y="3004.1826">nodes_ : std::list&lt;NodeInfo&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1392.5" y="3014.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="403" x="1404.5" y="3020.4795">lastsend_list_ : std::list&lt;std::tuple&lt;QTime, mac_t, bool&gt;&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1385.5" x2="1937.5" y1="3027.7813" y2="3027.7813"/><ellipse cx="1395.5" cy="3041.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="91" x="1404.5" y="3044.7764">NodeStatus()</text><ellipse cx="1395.5" cy="3057.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="1404.5" y="3061.0732">addNode(NodeInfo&amp;&amp; node) : NodeInfo&amp;</text><ellipse cx="1395.5" cy="3074.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="1404.5" y="3077.3701">getNode(mac_t mac_address) : NodeInfo&amp;</text><ellipse cx="1395.5" cy="3090.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="528" x="1404.5" y="3093.667">isConflicting(mac_t mac_address_src, mac_t mac_conflict, bool&amp; send) : bool</text><ellipse cx="1395.5" cy="3106.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="240" x="1404.5" y="3109.9639">getNodes() : std::list&lt;NodeInfo&gt;&amp;</text><ellipse cx="1395.5" cy="3122.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="355" x="1404.5" y="3126.2607">addLastSend(QTime lastsend, mac_t lastmac) : void</text><ellipse cx="1395.5" cy="3139.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="1404.5" y="3142.5576">removeNode(mac_t mac_address) : void</text></g><!--MD5=[6136598bc493953d658e8aab407783f9]
class Process_AP--><g id="elem_Process_AP"><rect codeLine="201" fill="#F1F1F1" height="145.7813" id="Process_AP" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="380" x="2542.5" y="960.5"/><ellipse cx="2687.75" cy="976.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2690.7188,982.1406 Q2690.1406,982.4375 2689.5,982.5781 Q2688.8594,982.7344 2688.1563,982.7344 Q2685.6563,982.7344 2684.3281,981.0938 Q2683.0156,979.4375 2683.0156,976.3125 Q2683.0156,973.1875 2684.3281,971.5313 Q2685.6563,969.875 2688.1563,969.875 Q2688.8594,969.875 2689.5,970.0313 Q2690.1563,970.1875 2690.7188,970.4844 L2690.7188,973.2031 Q2690.0938,972.625 2689.5,972.3594 Q2688.9063,972.0781 2688.2813,972.0781 Q2686.9375,972.0781 2686.25,973.1563 Q2685.5625,974.2188 2685.5625,976.3125 Q2685.5625,978.4063 2686.25,979.4844 Q2686.9375,980.5469 2688.2813,980.5469 Q2688.9063,980.5469 2689.5,980.2813 Q2690.0938,980 2690.7188,979.4219 L2690.7188,982.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="81" x="2708.25" y="981.3467">Process_AP</text><line style="stroke:#181818;stroke-width:0.5;" x1="2543.5" x2="2921.5" y1="992.5" y2="992.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2550.5" y="1003.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="2562.5" y="1009.4951">window_ : Window_AP</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2550.5" y="1019.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="2562.5" y="1025.792">ip_address_ : address</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2550.5" y="1035.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="2562.5" y="1042.0889">listen_thread_ : std::unique_ptr&lt;ListenThread_AP&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="2550.5" y="1052.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="104" x="2562.5" y="1058.3857">port_ : uint16_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="2543.5" x2="2921.5" y1="1065.6875" y2="1065.6875"/><ellipse cx="2553.5" cy="1079.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="239" x="2562.5" y="1082.6826">Process_AP(int&amp; argc, char** argv)</text><ellipse cx="2553.5" cy="1095.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="103" x="2562.5" y="1098.9795">~Process_AP()</text></g><!--MD5=[9149b4e84fdc190b1bc0958f1c520eea]
class Process_Node--><g id="elem_Process_Node"><rect codeLine="211" fill="#F1F1F1" height="602.0938" id="Process_Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="408" x="6029.5" y="732.5"/><ellipse cx="6179.25" cy="748.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6182.2188,754.1406 Q6181.6406,754.4375 6181,754.5781 Q6180.3594,754.7344 6179.6563,754.7344 Q6177.1563,754.7344 6175.8281,753.0938 Q6174.5156,751.4375 6174.5156,748.3125 Q6174.5156,745.1875 6175.8281,743.5313 Q6177.1563,741.875 6179.6563,741.875 Q6180.3594,741.875 6181,742.0313 Q6181.6563,742.1875 6182.2188,742.4844 L6182.2188,745.2031 Q6181.5938,744.625 6181,744.3594 Q6180.4063,744.0781 6179.7813,744.0781 Q6178.4375,744.0781 6177.75,745.1563 Q6177.0625,746.2188 6177.0625,748.3125 Q6177.0625,750.4063 6177.75,751.4844 Q6178.4375,752.5469 6179.7813,752.5469 Q6180.4063,752.5469 6181,752.2813 Q6181.5938,752 6182.2188,751.4219 L6182.2188,754.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="100" x="6199.75" y="753.3467">Process_Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="6030.5" x2="6436.5" y1="764.5" y2="764.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="775.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="6049.5" y="781.4951">transform_time_ : QTime</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="791.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="277" x="6049.5" y="797.792">thread_receive_ : ThreadReceive_Node*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="807.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="243" x="6049.5" y="814.0889">thread_send_ : ThreadSend_Node*</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="824.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="6049.5" y="830.3857">window_ : Window_Node</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="840.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="6049.5" y="846.6826">address_current_ : address</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="856.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="6049.5" y="862.9795">address_server_ : address</text><ellipse cx="6040.5" cy="875.9297" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="6049.5" y="879.2764">connected_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="889.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="6049.5" y="895.5732">mac_current_ : byte</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="905.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="6049.5" y="911.8701">buffer : char</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="921.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="6049.5" y="928.167">backoff_time_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="938.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="6049.5" y="944.4639">io_context_ : io_context</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="954.4141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="215" x="6049.5" y="960.7607">queue_ : queue&lt;DataWarper&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="970.7109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="174" x="6049.5" y="977.0576">opinion_ : reuse_address</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="987.0078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="6049.5" y="993.3545">queue_lock_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1003.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="196" x="6049.5" y="1009.6514">status_lock_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1019.6016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="183" x="6049.5" y="1025.9482">time_lock_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1035.8984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="6049.5" y="1042.2451">socket_client_ : shared_ptr&lt;socket_t&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1052.1953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="217" x="6049.5" y="1058.542">bufsize : static constexpr size_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1068.4922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="279" x="6049.5" y="1074.8389">max_thread : static constexpr std::size_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1084.7891"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="6049.5" y="1091.1357">status_ : status</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1101.0859"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="6049.5" y="1107.4326">backoff_counter_ : uint16_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1117.3828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="161" x="6049.5" y="1123.7295">port_current_ : uint16_t</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1133.6797"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="6049.5" y="1140.0264">port_server_ : uint16_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="6030.5" x2="6436.5" y1="1147.3281" y2="1147.3281"/><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1157.9766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="122" x="6049.5" y="1164.3232">~Process_Node()</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1174.2734"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="195" x="6049.5" y="1180.6201">frontQueue() : DataWarper&amp;</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1190.5703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="6049.5" y="1196.917">gettime() : QTime</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1206.8672"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="6049.5" y="1213.2139">isQueueEmpty() : bool</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1223.1641"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="6049.5" y="1229.5107">getstatus() : int</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1239.4609"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="382" x="6049.5" y="1245.8076">Process_Node(int&amp; argc, char** argv) : signals : public :</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1255.7578"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="6049.5" y="1262.1045">cleanQueue() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1272.0547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="125" x="6049.5" y="1278.4014">popQueue() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1288.3516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="303" x="6049.5" y="1294.6982">pushQueue(const DataWarper&amp; data) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1304.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="206" x="6049.5" y="1310.9951">setstatus(status status) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6037.5" y="1320.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="6049.5" y="1327.292">settime(QTime time) : void</text></g><!--MD5=[70a8c039b35a955a7ca7f66479d84584]
class ReceiveThread_AP--><g id="elem_ReceiveThread_AP"><rect codeLine="249" fill="#F1F1F1" height="292.4531" id="ReceiveThread_AP" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1926" x="1206.5" y="2538"/><ellipse cx="2100.75" cy="2554" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M2103.7188,2559.6406 Q2103.1406,2559.9375 2102.5,2560.0781 Q2101.8594,2560.2344 2101.1563,2560.2344 Q2098.6563,2560.2344 2097.3281,2558.5938 Q2096.0156,2556.9375 2096.0156,2553.8125 Q2096.0156,2550.6875 2097.3281,2549.0313 Q2098.6563,2547.375 2101.1563,2547.375 Q2101.8594,2547.375 2102.5,2547.5313 Q2103.1563,2547.6875 2103.7188,2547.9844 L2103.7188,2550.7031 Q2103.0938,2550.125 2102.5,2549.8594 Q2101.9063,2549.5781 2101.2813,2549.5781 Q2099.9375,2549.5781 2099.25,2550.6563 Q2098.5625,2551.7188 2098.5625,2553.8125 Q2098.5625,2555.9063 2099.25,2556.9844 Q2099.9375,2558.0469 2101.2813,2558.0469 Q2101.9063,2558.0469 2102.5,2557.7813 Q2103.0938,2557.5 2103.7188,2556.9219 L2103.7188,2559.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="2121.25" y="2558.8467">ReceiveThread_AP</text><line style="stroke:#181818;stroke-width:0.5;" x1="1207.5" x2="3131.5" y1="2570" y2="2570"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2580.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="1226.5" y="2586.9951">status_ : NodeStatus&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2596.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="163" x="1226.5" y="2603.292">window_ : Window_AP&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2613.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="1226.5" y="2619.5889">log_mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2629.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="211" x="1226.5" y="2635.8857">status_mutex_ : shared_mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2645.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="1226.5" y="2652.1826">socket_server_ : shared_ptr&lt;socket_t&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="1207.5" x2="3131.5" y1="2659.4844" y2="2659.4844"/><ellipse cx="1217.5" cy="2673.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1204" x="1226.5" y="2676.4795">ReceiveThread_AP(shared_ptr&lt;socket_t&gt; socket_server, shared_mutex log_mutex, shared_mutex status_mutex, NodeStatus&amp; status, Window_AP&amp; window, QObject* parent)</text><ellipse cx="1217.5" cy="2689.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="1226.5" y="2692.7764">~ReceiveThread_AP()</text><polygon fill="#FFFF44" points="1217.5,2700.7266,1221.5,2704.7266,1217.5,2708.7266,1213.5,2704.7266" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="355" x="1226.5" y="2709.0732">showStatusSignal(const NodeInfo &amp;) : signals : void</text><polygon fill="#FFFF44" points="1217.5,2717.0234,1221.5,2721.0234,1217.5,2725.0234,1213.5,2721.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="280" x="1226.5" y="2725.3701">appendLogSignal(const QString &amp;) : void</text><polygon fill="#FFFF44" points="1217.5,2733.3203,1221.5,2737.3203,1217.5,2741.3203,1213.5,2737.3203" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1900" x="1226.5" y="2741.667">messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&amp;, const QString&amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &amp;, const QString &amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void</text><polygon fill="#FFFF44" points="1217.5,2749.6172,1221.5,2753.6172,1217.5,2757.6172,1213.5,2753.6172" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="1226.5" y="2757.9639">run() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2767.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="1226.5" y="2774.2607">sendACK(byte mac_src, byte mac_dest) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2784.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="369" x="1226.5" y="2790.5576">sendAnnounce(byte sender, QTime send_time) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2800.5078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="329" x="1226.5" y="2806.8545">sendConflict(byte sender1, byte sender2) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="1214.5" y="2816.8047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="1226.5" y="2823.1514">showStatus(const NodeInfo&amp; nodeinfo) : void</text></g><!--MD5=[8a706783281c27a188b75b5f9fb3794d]
class ThreadReceive_Node--><g id="elem_ThreadReceive_Node"><rect codeLine="268" fill="#F1F1F1" height="259.8594" id="ThreadReceive_Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1926" x="3309.5" y="2169"/><ellipse cx="4194.25" cy="2185" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M4197.2188,2190.6406 Q4196.6406,2190.9375 4196,2191.0781 Q4195.3594,2191.2344 4194.6563,2191.2344 Q4192.1563,2191.2344 4190.8281,2189.5938 Q4189.5156,2187.9375 4189.5156,2184.8125 Q4189.5156,2181.6875 4190.8281,2180.0313 Q4192.1563,2178.375 4194.6563,2178.375 Q4195.3594,2178.375 4196,2178.5313 Q4196.6563,2178.6875 4197.2188,2178.9844 L4197.2188,2181.7031 Q4196.5938,2181.125 4196,2180.8594 Q4195.4063,2180.5781 4194.7813,2180.5781 Q4193.4375,2180.5781 4192.75,2181.6563 Q4192.0625,2182.7188 4192.0625,2184.8125 Q4192.0625,2186.9063 4192.75,2187.9844 Q4193.4375,2189.0469 4194.7813,2189.0469 Q4195.4063,2189.0469 4196,2188.7813 Q4196.5938,2188.5 4197.2188,2187.9219 L4197.2188,2190.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="148" x="4214.75" y="2189.8467">ThreadReceive_Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="3310.5" x2="5234.5" y1="2201" y2="2201"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2211.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="3329.5" y="2217.9951">app_ : Process_Node&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2227.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="3329.5" y="2234.292">window_ : Window_Node&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2244.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="3329.5" y="2250.5889">mac_current_ : byte</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2260.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="83" x="3329.5" y="2266.8857">buffer : char</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2276.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="3329.5" y="2283.1826">io_context_ : io_context</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2293.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="3329.5" y="2299.4795">socket_client_ : shared_ptr&lt;socket_t&gt;</text><line style="stroke:#181818;stroke-width:0.5;" x1="3310.5" x2="5234.5" y1="2306.7813" y2="2306.7813"/><ellipse cx="3320.5" cy="2320.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1146" x="3329.5" y="2323.7764">ThreadReceive_Node(Process_Node&amp; node, Window_Node&amp; window, shared_ptr&lt;socket_t&gt; socket_client, io_context io_context, byte mac_current, QObject* parent)</text><ellipse cx="3320.5" cy="2336.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="3329.5" y="2340.0732">~ThreadReceive_Node()</text><ellipse cx="3320.5" cy="2353.0234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="3329.5" y="2356.3701">taskend() : signals : void</text><ellipse cx="3320.5" cy="2369.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1900" x="3329.5" y="2372.667">messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&amp;, const QString&amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &amp;, const QString &amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="3317.5" y="2382.6172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="588" x="3329.5" y="2388.9639">receiveHandler(const boost::system::error_code&amp; ec, size_t bytes_transferred) : void</text><polygon fill="#FFFF44" points="3320.5,2396.9141,3324.5,2400.9141,3320.5,2404.9141,3316.5,2400.9141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="3329.5" y="2405.2607">run() : void</text><ellipse cx="3320.5" cy="2418.2109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="213" x="3329.5" y="2421.5576">setText(const QString &amp;) : void</text></g><!--MD5=[1fd91cac75dfc5fe03d8666c1a4464ee]
class ThreadSend_Node--><g id="elem_ThreadSend_Node"><rect codeLine="285" fill="#F1F1F1" height="308.75" id="ThreadSend_Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1926" x="5270.5" y="2144.5"/><ellipse cx="6164.75" cy="2160.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6167.7188,2166.1406 Q6167.1406,2166.4375 6166.5,2166.5781 Q6165.8594,2166.7344 6165.1563,2166.7344 Q6162.6563,2166.7344 6161.3281,2165.0938 Q6160.0156,2163.4375 6160.0156,2160.3125 Q6160.0156,2157.1875 6161.3281,2155.5313 Q6162.6563,2153.875 6165.1563,2153.875 Q6165.8594,2153.875 6166.5,2154.0313 Q6167.1563,2154.1875 6167.7188,2154.4844 L6167.7188,2157.2031 Q6167.0938,2156.625 6166.5,2156.3594 Q6165.9063,2156.0781 6165.2813,2156.0781 Q6163.9375,2156.0781 6163.25,2157.1563 Q6162.5625,2158.2188 6162.5625,2160.3125 Q6162.5625,2162.4063 6163.25,2163.4844 Q6163.9375,2164.5469 6165.2813,2164.5469 Q6165.9063,2164.5469 6166.5,2164.2813 Q6167.0938,2164 6167.7188,2163.4219 L6167.7188,2166.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="6185.25" y="2165.3467">ThreadSend_Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="5271.5" x2="7195.5" y1="2176.5" y2="2176.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2187.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="5290.5" y="2193.4951">app_ : Process_Node&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2203.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="182" x="5290.5" y="2209.792">window_ : Window_Node&amp;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2219.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="106" x="5290.5" y="2226.0889">sending_ : bool</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2236.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="136" x="5290.5" y="2242.3857">mac_current_ : byte</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2252.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="5290.5" y="2258.6826">backoff_time_ : int</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2268.6328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="154" x="5290.5" y="2274.9795">sending_lock_ : mutex</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2284.9297"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="268" x="5290.5" y="2291.2764">socket_client_ : shared_ptr&lt;socket_t&gt;</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="5278.5" y="2301.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="187" x="5290.5" y="2307.5732">backoff_counter_ : uint16_t</text><line style="stroke:#181818;stroke-width:0.5;" x1="5271.5" x2="7195.5" y1="2314.875" y2="2314.875"/><ellipse cx="5281.5" cy="2328.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="973" x="5290.5" y="2331.8701">ThreadSend_Node(Window_Node&amp; window, Process_Node&amp; node, shared_ptr&lt;socket_t&gt; socket_client, byte mac_current, QObject* parent)</text><ellipse cx="5281.5" cy="2344.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="5290.5" y="2348.167">~ThreadSend_Node()</text><ellipse cx="5281.5" cy="2361.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="133" x="5290.5" y="2364.4639">getSending() : bool</text><ellipse cx="5281.5" cy="2377.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="274" x="5290.5" y="2380.7607">setText(const QString &amp;) : signals : void</text><ellipse cx="5281.5" cy="2393.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1900" x="5290.5" y="2397.0576">messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&amp;, const QString&amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &amp;, const QString &amp;, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void</text><polygon fill="#FFFF44" points="5281.5,2405.0078,5285.5,2409.0078,5281.5,2413.0078,5277.5,2409.0078" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="74" x="5290.5" y="2413.3545">run() : void</text><ellipse cx="5281.5" cy="2426.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="220" x="5290.5" y="2429.6514">setSending(bool sending) : void</text><ellipse cx="5281.5" cy="2442.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="107" x="5290.5" y="2445.9482">taskend() : void</text></g><!--MD5=[ab4b88fe1643eb92488b6492b66fd5a9]
class Window_AP--><g id="elem_Window_AP"><rect codeLine="305" fill="#F1F1F1" height="96.8906" id="Window_AP" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="230" x="3070.5" y="2971.5"/><ellipse cx="3141.75" cy="2987.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M3144.7188,2993.1406 Q3144.1406,2993.4375 3143.5,2993.5781 Q3142.8594,2993.7344 3142.1563,2993.7344 Q3139.6563,2993.7344 3138.3281,2992.0938 Q3137.0156,2990.4375 3137.0156,2987.3125 Q3137.0156,2984.1875 3138.3281,2982.5313 Q3139.6563,2980.875 3142.1563,2980.875 Q3142.8594,2980.875 3143.5,2981.0313 Q3144.1563,2981.1875 3144.7188,2981.4844 L3144.7188,2984.2031 Q3144.0938,2983.625 3143.5,2983.3594 Q3142.9063,2983.0781 3142.2813,2983.0781 Q3140.9375,2983.0781 3140.25,2984.1563 Q3139.5625,2985.2188 3139.5625,2987.3125 Q3139.5625,2989.4063 3140.25,2990.4844 Q3140.9375,2991.5469 3142.2813,2991.5469 Q3142.9063,2991.5469 3143.5,2991.2813 Q3144.0938,2991 3144.7188,2990.4219 L3144.7188,2993.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="79" x="3162.25" y="2992.3467">Window_AP</text><line style="stroke:#181818;stroke-width:0.5;" x1="3071.5" x2="3299.5" y1="3003.5" y2="3003.5"/><ellipse cx="3081.5" cy="3017.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="99" x="3090.5" y="3020.4951">ui_ : Ui::UI_ap*</text><line style="stroke:#181818;stroke-width:0.5;" x1="3071.5" x2="3299.5" y1="3027.7969" y2="3027.7969"/><ellipse cx="3081.5" cy="3041.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="204" x="3090.5" y="3044.792">Window_AP(QWidget* parent)</text><ellipse cx="3081.5" cy="3057.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="101" x="3090.5" y="3061.0889">~Window_AP()</text></g><!--MD5=[de2b18b54d7762ceb35e9807b803c01a]
class Window_Node--><g id="elem_Window_Node"><rect codeLine="312" fill="#F1F1F1" height="96.8906" id="Window_Node" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="249" x="6109" y="2635.5"/><ellipse cx="6180.25" cy="2651.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6183.2188,2657.1406 Q6182.6406,2657.4375 6182,2657.5781 Q6181.3594,2657.7344 6180.6563,2657.7344 Q6178.1563,2657.7344 6176.8281,2656.0938 Q6175.5156,2654.4375 6175.5156,2651.3125 Q6175.5156,2648.1875 6176.8281,2646.5313 Q6178.1563,2644.875 6180.6563,2644.875 Q6181.3594,2644.875 6182,2645.0313 Q6182.6563,2645.1875 6183.2188,2645.4844 L6183.2188,2648.2031 Q6182.5938,2647.625 6182,2647.3594 Q6181.4063,2647.0781 6180.7813,2647.0781 Q6179.4375,2647.0781 6178.75,2648.1563 Q6178.0625,2649.2188 6178.0625,2651.3125 Q6178.0625,2653.4063 6178.75,2654.4844 Q6179.4375,2655.5469 6180.7813,2655.5469 Q6181.4063,2655.5469 6182,2655.2813 Q6182.5938,2655 6183.2188,2654.4219 L6183.2188,2657.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="98" x="6200.75" y="2656.3467">Window_Node</text><line style="stroke:#181818;stroke-width:0.5;" x1="6110" x2="6357" y1="2667.5" y2="2667.5"/><ellipse cx="6120" cy="2681.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="6129" y="2684.4951">ui_ : Ui::UI_node*</text><line style="stroke:#181818;stroke-width:0.5;" x1="6110" x2="6357" y1="2691.7969" y2="2691.7969"/><ellipse cx="6120" cy="2705.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="6129" y="2708.792">Window_Node(QWidget* parent)</text><ellipse cx="6120" cy="2721.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="120" x="6129" y="2725.0889">~Window_Node()</text></g><!--MD5=[131a498c821955fc1f1a38bf9ed94fe0]
class ackFrameBodyPROTOBUF_FINAL--><g id="elem_ackFrameBodyPROTOBUF_FINAL"><rect codeLine="319" fill="#F1F1F1" height="699.875" id="ackFrameBodyPROTOBUF_FINAL" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1237" x="6472" y="683.5"/><ellipse cx="6974.25" cy="699.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M6977.2188,705.1406 Q6976.6406,705.4375 6976,705.5781 Q6975.3594,705.7344 6974.6563,705.7344 Q6972.1563,705.7344 6970.8281,704.0938 Q6969.5156,702.4375 6969.5156,699.3125 Q6969.5156,696.1875 6970.8281,694.5313 Q6972.1563,692.875 6974.6563,692.875 Q6975.3594,692.875 6976,693.0313 Q6976.6563,693.1875 6977.2188,693.4844 L6977.2188,696.2031 Q6976.5938,695.625 6976,695.3594 Q6975.4063,695.0781 6974.7813,695.0781 Q6973.4375,695.0781 6972.75,696.1563 Q6972.0625,697.2188 6972.0625,699.3125 Q6972.0625,701.4063 6972.75,702.4844 Q6973.4375,703.5469 6974.7813,703.5469 Q6975.4063,703.5469 6976,703.2813 Q6976.5938,703 6977.2188,702.4219 L6977.2188,705.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="6994.75" y="704.3467">ackFrameBodyPROTOBUF_FINAL</text><line style="stroke:#181818;stroke-width:0.5;" x1="6473" x2="7708" y1="715.5" y2="715.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="726.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="6492" y="732.4951">: friend struct::TableStruct_DataWarper_2eproto</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="742.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="6492" y="748.792">_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize</text><ellipse cx="6483" cy="761.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="6492" y="765.0889">kIndexInFileMessages : static constexpr int</text><line style="stroke:#181818;stroke-width:0.5;" x1="6473" x2="7708" y1="772.3906" y2="772.3906"/><ellipse cx="6483" cy="786.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="6492" y="789.3857">ackFrameBody()</text><ellipse cx="6483" cy="802.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="304" x="6492" y="805.6826">ackFrameBody(const ackFrameBody&amp; from)</text><ellipse cx="6483" cy="818.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="6492" y="821.9795">ackFrameBody(ackFrameBody&amp;&amp; from)</text><polygon fill="#FFFF44" points="6483,829.9297,6487,833.9297,6483,837.9297,6479,833.9297" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="414" x="6492" y="838.2764">ackFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)</text><ellipse cx="6483" cy="851.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="124" x="6492" y="854.5732">~ackFrameBody()</text><ellipse cx="6483" cy="867.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="6492" y="870.8701">GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}</text><ellipse cx="6483" cy="883.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1211" x="6492" y="887.167">_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}</text><ellipse cx="6483" cy="900.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="6492" y="903.4639">Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void</text><ellipse cx="6483" cy="916.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="6492" y="919.7607">default_instance() : ackFrameBody&amp;</text><ellipse cx="6483" cy="932.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="400" x="6492" y="936.0576">operator=(const ackFrameBody&amp; from) : ackFrameBody&amp;</text><ellipse cx="6483" cy="949.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="369" x="6492" y="952.3545">operator=(ackFrameBody&amp;&amp; from) : ackFrameBody&amp;</text><ellipse cx="6483" cy="965.3047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="223" x="6492" y="968.6514">New() : ackFrameBody* {query}</text><ellipse cx="6483" cy="981.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="525" x="6492" y="984.9482">New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : ackFrameBody* {query}</text><ellipse cx="6483" cy="997.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="303" x="6492" y="1001.2451">internal_default_instance() : ackFrameBody*</text><ellipse cx="6483" cy="1014.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="6492" y="1017.542">IsInitialized() : bool {query}</text><ellipse cx="6483" cy="1030.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="665" x="6492" y="1033.8389">_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*</text><ellipse cx="6483" cy="1046.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="6492" y="1050.1357">GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="6483" cy="1063.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="423" x="6492" y="1066.4326">descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="6483" cy="1079.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="444" x="6492" y="1082.7295">GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*</text><ellipse cx="6483" cy="1095.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="6492" y="1099.0264">GetCachedSize() : int {query}</text><ellipse cx="6483" cy="1111.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="6492" y="1115.3232">ByteSizeLong() : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1125.2734"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="6492" y="1131.6201">GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1141.5703"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="6492" y="1147.917">FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1157.8672"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="6492" y="1164.2139">ArenaDtor(void* object) : void</text><ellipse cx="6483" cy="1177.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="6492" y="1180.5107">CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="6483" cy="1193.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="313" x="6492" y="1196.8076">CopyFrom(const ackFrameBody&amp; from) : void</text><ellipse cx="6483" cy="1209.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="6492" y="1213.1045">InitAsDefaultInstance() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1223.0547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="289" x="6492" y="1229.4014">InternalSwap(ackFrameBody* other) : void</text><ellipse cx="6483" cy="1242.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="6492" y="1245.6982">MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="6483" cy="1258.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="322" x="6492" y="1261.9951">MergeFrom(const ackFrameBody&amp; from) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1271.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="6492" y="1278.292">RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1288.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="6492" y="1294.5889">SetCachedSize(int size) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1304.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="6492" y="1310.8857">SharedCtor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="6480" y="1320.8359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="6492" y="1327.1826">SharedDtor() : void</text><ellipse cx="6483" cy="1340.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="238" x="6492" y="1343.4795">Swap(ackFrameBody* other) : void</text><ellipse cx="6483" cy="1356.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="326" x="6492" y="1359.7764">UnsafeArenaSwap(ackFrameBody* other) : void</text><ellipse cx="6483" cy="1372.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="348" x="6492" y="1376.0732">swap(ackFrameBody&amp; a, ackFrameBody&amp; b) : void</text></g><!--MD5=[5d741fdb6d50c78537bcbff74fa6da82]
class announceFrameBodyPROTOBUF_FINAL--><g id="elem_announceFrameBodyPROTOBUF_FINAL"><rect codeLine="363" fill="#F1F1F1" height="895.4375" id="announceFrameBodyPROTOBUF_FINAL" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1237" x="7744" y="586"/><ellipse cx="8223.25" cy="602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8226.2188,607.6406 Q8225.6406,607.9375 8225,608.0781 Q8224.3594,608.2344 8223.6563,608.2344 Q8221.1563,608.2344 8219.8281,606.5938 Q8218.5156,604.9375 8218.5156,601.8125 Q8218.5156,598.6875 8219.8281,597.0313 Q8221.1563,595.375 8223.6563,595.375 Q8224.3594,595.375 8225,595.5313 Q8225.6563,595.6875 8226.2188,595.9844 L8226.2188,598.7031 Q8225.5938,598.125 8225,597.8594 Q8224.4063,597.5781 8223.7813,597.5781 Q8222.4375,597.5781 8221.75,598.6563 Q8221.0625,599.7188 8221.0625,601.8125 Q8221.0625,603.9063 8221.75,604.9844 Q8222.4375,606.0469 8223.7813,606.0469 Q8224.4063,606.0469 8225,605.7813 Q8225.5938,605.5 8226.2188,604.9219 L8226.2188,607.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="270" x="8243.75" y="606.8467">announceFrameBodyPROTOBUF_FINAL</text><line style="stroke:#181818;stroke-width:0.5;" x1="7745" x2="8980" y1="618" y2="618"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="628.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="7764" y="634.9951">nodesend_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="644.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="341" x="7764" y="651.292">sendtime_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="661.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="7764" y="667.5889">: friend struct::TableStruct_DataWarper_2eproto</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="677.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="7764" y="683.8857">_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize</text><ellipse cx="7755" cy="696.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="7764" y="700.1826">kIndexInFileMessages : static constexpr int</text><line style="stroke:#181818;stroke-width:0.5;" x1="7745" x2="8980" y1="707.4844" y2="707.4844"/><ellipse cx="7755" cy="721.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="158" x="7764" y="724.4795">announceFrameBody()</text><ellipse cx="7755" cy="737.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="396" x="7764" y="740.7764">announceFrameBody(const announceFrameBody&amp; from)</text><ellipse cx="7755" cy="753.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="365" x="7764" y="757.0732">announceFrameBody(announceFrameBody&amp;&amp; from)</text><polygon fill="#FFFF44" points="7755,765.0234,7759,769.0234,7755,773.0234,7751,769.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="460" x="7764" y="773.3701">announceFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)</text><ellipse cx="7755" cy="786.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="7764" y="789.667">~announceFrameBody()</text><ellipse cx="7755" cy="802.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="7764" y="805.9639">GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="815.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="7764" y="822.2607">_internal_nodesend() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="832.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="470" x="7764" y="838.5576">_internal_sendtime() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="7755" cy="851.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="411" x="7764" y="854.8545">nodesend() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="7755" cy="867.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="405" x="7764" y="871.1514">sendtime() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="7755" cy="884.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1211" x="7764" y="887.4482">_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}</text><ellipse cx="7755" cy="900.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="7764" y="903.7451">Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void</text><ellipse cx="7755" cy="916.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="296" x="7764" y="920.042">default_instance() : announceFrameBody&amp;</text><ellipse cx="7755" cy="932.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="492" x="7764" y="936.3389">operator=(const announceFrameBody&amp; from) : announceFrameBody&amp;</text><ellipse cx="7755" cy="949.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="461" x="7764" y="952.6357">operator=(announceFrameBody&amp;&amp; from) : announceFrameBody&amp;</text><ellipse cx="7755" cy="965.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="7764" y="968.9326">New() : announceFrameBody* {query}</text><ellipse cx="7755" cy="981.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="571" x="7764" y="985.2295">New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : announceFrameBody* {query}</text><ellipse cx="7755" cy="998.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="349" x="7764" y="1001.5264">internal_default_instance() : announceFrameBody*</text><ellipse cx="7755" cy="1014.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="7764" y="1017.8232">IsInitialized() : bool {query}</text><ellipse cx="7755" cy="1030.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="665" x="7764" y="1034.1201">_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*</text><ellipse cx="7755" cy="1047.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="7764" y="1050.417">GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="7755" cy="1063.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="423" x="7764" y="1066.7139">descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="7755" cy="1079.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="444" x="7764" y="1083.0107">GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*</text><ellipse cx="7755" cy="1095.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="7764" y="1099.3076">GetCachedSize() : int {query}</text><ellipse cx="7755" cy="1112.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="7764" y="1115.6045">ByteSizeLong() : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1125.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="7764" y="1131.9014">GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1141.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="7764" y="1148.1982">FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1158.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="7764" y="1164.4951">ArenaDtor(void* object) : void</text><ellipse cx="7755" cy="1177.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="7764" y="1180.792">CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="7755" cy="1193.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="359" x="7764" y="1197.0889">CopyFrom(const announceFrameBody&amp; from) : void</text><ellipse cx="7755" cy="1210.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="7764" y="1213.3857">InitAsDefaultInstance() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1223.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="335" x="7764" y="1229.6826">InternalSwap(announceFrameBody* other) : void</text><ellipse cx="7755" cy="1242.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="7764" y="1245.9795">MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="7755" cy="1258.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="368" x="7764" y="1262.2764">MergeFrom(const announceFrameBody&amp; from) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1272.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="7764" y="1278.5732">RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1288.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="7764" y="1294.8701">SetCachedSize(int size) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1304.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="7764" y="1311.167">SharedCtor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1321.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="7764" y="1327.4639">SharedDtor() : void</text><ellipse cx="7755" cy="1340.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="284" x="7764" y="1343.7607">Swap(announceFrameBody* other) : void</text><ellipse cx="7755" cy="1356.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="372" x="7764" y="1360.0576">UnsafeArenaSwap(announceFrameBody* other) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1370.0078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="512" x="7764" y="1376.3545">_internal_set_nodesend(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="7752" y="1386.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="506" x="7764" y="1392.6514">_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="7755" cy="1405.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="162" x="7764" y="1408.9482">clear_nodesend() : void</text><ellipse cx="7755" cy="1421.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="7764" y="1425.2451">clear_sendtime() : void</text><ellipse cx="7755" cy="1438.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="447" x="7764" y="1441.542">set_nodesend(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="7755" cy="1454.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="441" x="7764" y="1457.8389">set_sendtime(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="7755" cy="1470.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="440" x="7764" y="1474.1357">swap(announceFrameBody&amp; a, announceFrameBody&amp; b) : void</text></g><!--MD5=[96c3f73f65d1ee3e4f00c0baed69374d]
class conflictFrameBodyPROTOBUF_FINAL--><g id="elem_conflictFrameBodyPROTOBUF_FINAL"><rect codeLine="419" fill="#F1F1F1" height="895.4375" id="conflictFrameBodyPROTOBUF_FINAL" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1237" x="9016" y="586"/><ellipse cx="9505.75" cy="602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9508.7188,607.6406 Q9508.1406,607.9375 9507.5,608.0781 Q9506.8594,608.2344 9506.1563,608.2344 Q9503.6563,608.2344 9502.3281,606.5938 Q9501.0156,604.9375 9501.0156,601.8125 Q9501.0156,598.6875 9502.3281,597.0313 Q9503.6563,595.375 9506.1563,595.375 Q9506.8594,595.375 9507.5,595.5313 Q9508.1563,595.6875 9508.7188,595.9844 L9508.7188,598.7031 Q9508.0938,598.125 9507.5,597.8594 Q9506.9063,597.5781 9506.2813,597.5781 Q9504.9375,597.5781 9504.25,598.6563 Q9503.5625,599.7188 9503.5625,601.8125 Q9503.5625,603.9063 9504.25,604.9844 Q9504.9375,606.0469 9506.2813,606.0469 Q9506.9063,606.0469 9507.5,605.7813 Q9508.0938,605.5 9508.7188,604.9219 L9508.7188,607.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="249" x="9526.25" y="606.8467">conflictFrameBodyPROTOBUF_FINAL</text><line style="stroke:#181818;stroke-width:0.5;" x1="9017" x2="10252" y1="618" y2="618"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="628.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="9036" y="634.9951">nodesend1_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="644.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="356" x="9036" y="651.292">nodesend2_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="661.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="9036" y="667.5889">: friend struct::TableStruct_DataWarper_2eproto</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="677.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="9036" y="683.8857">_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize</text><ellipse cx="9027" cy="696.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="9036" y="700.1826">kIndexInFileMessages : static constexpr int</text><line style="stroke:#181818;stroke-width:0.5;" x1="9017" x2="10252" y1="707.4844" y2="707.4844"/><ellipse cx="9027" cy="721.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="9036" y="724.4795">conflictFrameBody()</text><ellipse cx="9027" cy="737.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="9036" y="740.7764">conflictFrameBody(const conflictFrameBody&amp; from)</text><ellipse cx="9027" cy="753.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="9036" y="757.0732">conflictFrameBody(conflictFrameBody&amp;&amp; from)</text><polygon fill="#FFFF44" points="9027,765.0234,9031,769.0234,9027,773.0234,9023,769.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="439" x="9036" y="773.3701">conflictFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)</text><ellipse cx="9027" cy="786.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="149" x="9036" y="789.667">~conflictFrameBody()</text><ellipse cx="9027" cy="802.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="9036" y="805.9639">GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="815.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="485" x="9036" y="822.2607">_internal_nodesend1() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="832.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="485" x="9036" y="838.5576">_internal_nodesend2() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="9027" cy="851.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="420" x="9036" y="854.8545">nodesend1() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="9027" cy="867.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="420" x="9036" y="871.1514">nodesend2() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="9027" cy="884.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1211" x="9036" y="887.4482">_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}</text><ellipse cx="9027" cy="900.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="9036" y="903.7451">Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void</text><ellipse cx="9027" cy="916.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="9036" y="920.042">IsInitialized() : bool {query}</text><ellipse cx="9027" cy="932.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="665" x="9036" y="936.3389">_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*</text><ellipse cx="9027" cy="949.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="275" x="9036" y="952.6357">default_instance() : conflictFrameBody&amp;</text><ellipse cx="9027" cy="965.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="450" x="9036" y="968.9326">operator=(const conflictFrameBody&amp; from) : conflictFrameBody&amp;</text><ellipse cx="9027" cy="981.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="419" x="9036" y="985.2295">operator=(conflictFrameBody&amp;&amp; from) : conflictFrameBody&amp;</text><ellipse cx="9027" cy="998.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="9036" y="1001.5264">New() : conflictFrameBody* {query}</text><ellipse cx="9027" cy="1014.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="550" x="9036" y="1017.8232">New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : conflictFrameBody* {query}</text><ellipse cx="9027" cy="1030.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="328" x="9036" y="1034.1201">internal_default_instance() : conflictFrameBody*</text><ellipse cx="9027" cy="1047.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="9036" y="1050.417">GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="9027" cy="1063.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="423" x="9036" y="1066.7139">descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="9027" cy="1079.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="444" x="9036" y="1083.0107">GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*</text><ellipse cx="9027" cy="1095.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="9036" y="1099.3076">GetCachedSize() : int {query}</text><ellipse cx="9027" cy="1112.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="9036" y="1115.6045">ByteSizeLong() : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1125.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="9036" y="1131.9014">GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1141.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="9036" y="1148.1982">FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1158.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="9036" y="1164.4951">ArenaDtor(void* object) : void</text><ellipse cx="9027" cy="1177.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="9036" y="1180.792">CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="9027" cy="1193.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="338" x="9036" y="1197.0889">CopyFrom(const conflictFrameBody&amp; from) : void</text><ellipse cx="9027" cy="1210.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="9036" y="1213.3857">InitAsDefaultInstance() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1223.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="314" x="9036" y="1229.6826">InternalSwap(conflictFrameBody* other) : void</text><ellipse cx="9027" cy="1242.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="9036" y="1245.9795">MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="9027" cy="1258.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="347" x="9036" y="1262.2764">MergeFrom(const conflictFrameBody&amp; from) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1272.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="9036" y="1278.5732">RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1288.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="9036" y="1294.8701">SetCachedSize(int size) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1304.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="9036" y="1311.167">SharedCtor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1321.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="9036" y="1327.4639">SharedDtor() : void</text><ellipse cx="9027" cy="1340.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="9036" y="1343.7607">Swap(conflictFrameBody* other) : void</text><ellipse cx="9027" cy="1356.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="351" x="9036" y="1360.0576">UnsafeArenaSwap(conflictFrameBody* other) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1370.0078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="521" x="9036" y="1376.3545">_internal_set_nodesend1(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="9024" y="1386.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="521" x="9036" y="1392.6514">_internal_set_nodesend2(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="9027" cy="1405.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="9036" y="1408.9482">clear_nodesend1() : void</text><ellipse cx="9027" cy="1421.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="9036" y="1425.2451">clear_nodesend2() : void</text><ellipse cx="9027" cy="1438.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="456" x="9036" y="1441.542">set_nodesend1(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="9027" cy="1454.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="456" x="9036" y="1457.8389">set_nodesend2(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="9027" cy="1470.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="398" x="9036" y="1474.1357">swap(conflictFrameBody&amp; a, conflictFrameBody&amp; b) : void</text></g><!--MD5=[4e5daf67c15d21127c305ecc3abebb4d]
class dataFrameBodyPROTOBUF_FINAL--><g id="elem_dataFrameBodyPROTOBUF_FINAL"><rect codeLine="475" fill="#F1F1F1" height="1139.8906" id="dataFrameBodyPROTOBUF_FINAL" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1484" x="10288.5" y="463.5"/><ellipse cx="10911.25" cy="479.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10914.2188,485.1406 Q10913.6406,485.4375 10913,485.5781 Q10912.3594,485.7344 10911.6563,485.7344 Q10909.1563,485.7344 10907.8281,484.0938 Q10906.5156,482.4375 10906.5156,479.3125 Q10906.5156,476.1875 10907.8281,474.5313 Q10909.1563,472.875 10911.6563,472.875 Q10912.3594,472.875 10913,473.0313 Q10913.6563,473.1875 10914.2188,473.4844 L10914.2188,476.2031 Q10913.5938,475.625 10913,475.3594 Q10912.4063,475.0781 10911.7813,475.0781 Q10910.4375,475.0781 10909.75,476.1563 Q10909.0625,477.2188 10909.0625,479.3125 Q10909.0625,481.4063 10909.75,482.4844 Q10910.4375,483.5469 10911.7813,483.5469 Q10912.4063,483.5469 10913,483.2813 Q10913.5938,483 10914.2188,482.4219 L10914.2188,485.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="10931.75" y="484.3467">dataFrameBodyPROTOBUF_FINAL</text><line style="stroke:#181818;stroke-width:0.5;" x1="10289.5" x2="11771.5" y1="495.5" y2="495.5"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="506.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="422" x="10308.5" y="512.4951">data_ : ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="522.4453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="320" x="10308.5" y="528.792">length_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="538.7422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="330" x="10308.5" y="545.0889">timelast_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="555.0391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="10308.5" y="561.3857">: friend struct::TableStruct_DataWarper_2eproto</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="571.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="10308.5" y="577.6826">_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize</text><ellipse cx="10299.5" cy="590.6328" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="10308.5" y="593.9795">kIndexInFileMessages : static constexpr int</text><line style="stroke:#181818;stroke-width:0.5;" x1="10289.5" x2="11771.5" y1="601.2813" y2="601.2813"/><ellipse cx="10299.5" cy="614.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1352" x="10308.5" y="618.2764">GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for" " string fields are deprecated and will be removed in a" " future release." ) std::string* unsafe_arena_release_data ()</text><ellipse cx="10299.5" cy="631.2266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1458" x="10308.5" y="634.5732">GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for" " string fields are deprecated and will be removed in a" " future release." ) void unsafe_arena_set_allocated_data ( std::string* data)</text><ellipse cx="10299.5" cy="647.5234" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="10308.5" y="650.8701">dataFrameBody()</text><ellipse cx="10299.5" cy="663.8203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="316" x="10308.5" y="667.167">dataFrameBody(const dataFrameBody&amp; from)</text><ellipse cx="10299.5" cy="680.1172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="285" x="10308.5" y="683.4639">dataFrameBody(dataFrameBody&amp;&amp; from)</text><polygon fill="#FFFF44" points="10299.5,691.4141,10303.5,695.4141,10299.5,699.4141,10295.5,695.4141" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="420" x="10308.5" y="699.7607">dataFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)</text><ellipse cx="10299.5" cy="712.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="10308.5" y="716.0576">~dataFrameBody()</text><ellipse cx="10299.5" cy="729.0078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="10308.5" y="732.3545">GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="742.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="10308.5" y="748.6514">_internal_length() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="758.6016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="459" x="10308.5" y="764.9482">_internal_timelast() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="10299.5" cy="777.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="384" x="10308.5" y="781.2451">length() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="10299.5" cy="794.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="394" x="10308.5" y="797.542">timelast() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="10299.5" cy="810.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1211" x="10308.5" y="813.8389">_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}</text><ellipse cx="10299.5" cy="826.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="10308.5" y="830.1357">Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void</text><ellipse cx="10299.5" cy="843.0859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="10308.5" y="846.4326">IsInitialized() : bool {query}</text><ellipse cx="10299.5" cy="859.3828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="665" x="10308.5" y="862.7295">_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*</text><ellipse cx="10299.5" cy="875.6797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="10308.5" y="879.0264">GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="10299.5" cy="891.9766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="423" x="10308.5" y="895.3232">descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="10299.5" cy="908.2734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="444" x="10308.5" y="911.6201">GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*</text><ellipse cx="10299.5" cy="924.5703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="256" x="10308.5" y="927.917">default_instance() : dataFrameBody&amp;</text><ellipse cx="10299.5" cy="940.8672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="412" x="10308.5" y="944.2139">operator=(const dataFrameBody&amp; from) : dataFrameBody&amp;</text><ellipse cx="10299.5" cy="957.1641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="381" x="10308.5" y="960.5107">operator=(dataFrameBody&amp;&amp; from) : dataFrameBody&amp;</text><ellipse cx="10299.5" cy="973.4609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="229" x="10308.5" y="976.8076">New() : dataFrameBody* {query}</text><ellipse cx="10299.5" cy="989.7578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="531" x="10308.5" y="993.1045">New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : dataFrameBody* {query}</text><ellipse cx="10299.5" cy="1006.0547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="309" x="10308.5" y="1009.4014">internal_default_instance() : dataFrameBody*</text><ellipse cx="10299.5" cy="1022.3516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="10308.5" y="1025.6982">GetCachedSize() : int {query}</text><ellipse cx="10299.5" cy="1038.6484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="10308.5" y="1041.9951">ByteSizeLong() : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1051.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="10308.5" y="1058.292">GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1068.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="10308.5" y="1074.5889">FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1084.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="262" x="10308.5" y="1090.8857">_internal_data() : std::string&amp; {query}</text><ellipse cx="10299.5" cy="1103.8359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="197" x="10308.5" y="1107.1826">data() : std::string&amp; {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1117.1328"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="259" x="10308.5" y="1123.4795">_internal_mutable_data() : std::string*</text><ellipse cx="10299.5" cy="1136.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="194" x="10308.5" y="1139.7764">mutable_data() : std::string*</text><ellipse cx="10299.5" cy="1152.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="189" x="10308.5" y="1156.0732">release_data() : std::string*</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1166.0234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="10308.5" y="1172.3701">ArenaDtor(void* object) : void</text><ellipse cx="10299.5" cy="1185.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="10308.5" y="1188.667">CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="10299.5" cy="1201.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="319" x="10308.5" y="1204.9639">CopyFrom(const dataFrameBody&amp; from) : void</text><ellipse cx="10299.5" cy="1217.9141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="10308.5" y="1221.2607">InitAsDefaultInstance() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1231.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="295" x="10308.5" y="1237.5576">InternalSwap(dataFrameBody* other) : void</text><ellipse cx="10299.5" cy="1250.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="10308.5" y="1253.8545">MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="10299.5" cy="1266.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="10308.5" y="1270.1514">MergeFrom(const dataFrameBody&amp; from) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1280.1016"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="10308.5" y="1286.4482">RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1296.3984"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="10308.5" y="1302.7451">SetCachedSize(int size) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1312.6953"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="10308.5" y="1319.042">SharedCtor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1328.9922"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="10308.5" y="1335.3389">SharedDtor() : void</text><ellipse cx="10299.5" cy="1348.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="10308.5" y="1351.6357">Swap(dataFrameBody* other) : void</text><ellipse cx="10299.5" cy="1364.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="332" x="10308.5" y="1367.9326">UnsafeArenaSwap(dataFrameBody* other) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1377.8828"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="341" x="10308.5" y="1384.2295">_internal_set_data(const std::string&amp; value) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1394.1797"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="485" x="10308.5" y="1400.5264">_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="10296.5" y="1410.4766"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="495" x="10308.5" y="1416.8232">_internal_set_timelast(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="10299.5" cy="1429.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="121" x="10308.5" y="1433.1201">clear_data() : void</text><ellipse cx="10299.5" cy="1446.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="135" x="10308.5" y="1449.417">clear_length() : void</text><ellipse cx="10299.5" cy="1462.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="10308.5" y="1465.7139">clear_timelast() : void</text><ellipse cx="10299.5" cy="1478.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="291" x="10308.5" y="1482.0107">set_allocated_data(std::string* data) : void</text><ellipse cx="10299.5" cy="1494.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="276" x="10308.5" y="1498.3076">set_data(const std::string&amp; value) : void</text><ellipse cx="10299.5" cy="1511.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="245" x="10308.5" y="1514.6045">set_data(std::string&amp;&amp; value) : void</text><ellipse cx="10299.5" cy="1527.5547" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="230" x="10308.5" y="1530.9014">set_data(const char* value) : void</text><ellipse cx="10299.5" cy="1543.8516" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="308" x="10308.5" y="1547.1982">set_data(const void* value, size_t size) : void</text><ellipse cx="10299.5" cy="1560.1484" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="420" x="10308.5" y="1563.4951">set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="10299.5" cy="1576.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="430" x="10308.5" y="1579.792">set_timelast(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="10299.5" cy="1592.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="360" x="10308.5" y="1596.0889">swap(dataFrameBody&amp; a, dataFrameBody&amp; b) : void</text></g><!--MD5=[996d32491d1a694fc8576bead9d86a6b]
class headerPROTOBUF_FINAL--><g id="elem_headerPROTOBUF_FINAL"><rect codeLine="546" fill="#F1F1F1" height="895.4375" id="headerPROTOBUF_FINAL" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="1237" x="11808" y="586"/><ellipse cx="12336.75" cy="602" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12339.7188,607.6406 Q12339.1406,607.9375 12338.5,608.0781 Q12337.8594,608.2344 12337.1563,608.2344 Q12334.6563,608.2344 12333.3281,606.5938 Q12332.0156,604.9375 12332.0156,601.8125 Q12332.0156,598.6875 12333.3281,597.0313 Q12334.6563,595.375 12337.1563,595.375 Q12337.8594,595.375 12338.5,595.5313 Q12339.1563,595.6875 12339.7188,595.9844 L12339.7188,598.7031 Q12339.0938,598.125 12338.5,597.8594 Q12337.9063,597.5781 12337.2813,597.5781 Q12335.9375,597.5781 12335.25,598.6563 Q12334.5625,599.7188 12334.5625,601.8125 Q12334.5625,603.9063 12335.25,604.9844 Q12335.9375,606.0469 12337.2813,606.0469 Q12337.9063,606.0469 12338.5,605.7813 Q12339.0938,605.5 12339.7188,604.9219 L12339.7188,607.6406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="171" x="12357.25" y="606.8467">headerPROTOBUF_FINAL</text><line style="stroke:#181818;stroke-width:0.5;" x1="11809" x2="13044" y1="618" y2="618"/><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="628.6484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="336" x="11828" y="634.9951">destmac_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="644.9453"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="326" x="11828" y="651.292">srcmac_ : ::PROTOBUF_NAMESPACE_ID::uint32</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="661.2422"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="331" x="11828" y="667.5889">: friend struct::TableStruct_DataWarper_2eproto</text><rect fill="none" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="677.5391"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="524" x="11828" y="683.8857">_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize</text><ellipse cx="11819" cy="696.8359" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="295" x="11828" y="700.1826">kIndexInFileMessages : static constexpr int</text><line style="stroke:#181818;stroke-width:0.5;" x1="11809" x2="13044" y1="707.4844" y2="707.4844"/><ellipse cx="11819" cy="721.1328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="59" x="11828" y="724.4795">header()</text><ellipse cx="11819" cy="737.4297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="11828" y="740.7764">header(const header&amp; from)</text><ellipse cx="11819" cy="753.7266" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="167" x="11828" y="757.0732">header(header&amp;&amp; from)</text><polygon fill="#FFFF44" points="11819,765.0234,11823,769.0234,11819,773.0234,11815,769.0234" style="stroke:#B38D22;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="361" x="11828" y="773.3701">header(::PROTOBUF_NAMESPACE_ID::Arena* arena)</text><ellipse cx="11819" cy="786.3203" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="71" x="11828" y="789.667">~header()</text><ellipse cx="11819" cy="802.6172" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="449" x="11828" y="805.9639">GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="815.9141"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="465" x="11828" y="822.2607">_internal_destmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="832.2109"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="455" x="11828" y="838.5576">_internal_srcmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="11819" cy="851.5078" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="400" x="11828" y="854.8545">destmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="11819" cy="867.8047" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="390" x="11828" y="871.1514">srcmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}</text><ellipse cx="11819" cy="884.1016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="1211" x="11828" y="887.4482">_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}</text><ellipse cx="11819" cy="900.3984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="354" x="11828" y="903.7451">Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void</text><ellipse cx="11819" cy="916.6953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="188" x="11828" y="920.042">IsInitialized() : bool {query}</text><ellipse cx="11819" cy="932.9922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="665" x="11828" y="936.3389">_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*</text><ellipse cx="11819" cy="949.2891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="450" x="11828" y="952.6357">GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="11819" cy="965.5859" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="423" x="11828" y="968.9326">descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*</text><ellipse cx="11819" cy="981.8828" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="444" x="11828" y="985.2295">GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*</text><ellipse cx="11819" cy="998.1797" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="197" x="11828" y="1001.5264">default_instance() : header&amp;</text><ellipse cx="11819" cy="1014.4766" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="294" x="11828" y="1017.8232">operator=(const header&amp; from) : header&amp;</text><ellipse cx="11819" cy="1030.7734" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="263" x="11828" y="1034.1201">operator=(header&amp;&amp; from) : header&amp;</text><ellipse cx="11819" cy="1047.0703" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="170" x="11828" y="1050.417">New() : header* {query}</text><ellipse cx="11819" cy="1063.3672" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="472" x="11828" y="1066.7139">New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : header* {query}</text><ellipse cx="11819" cy="1079.6641" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="250" x="11828" y="1083.0107">internal_default_instance() : header*</text><ellipse cx="11819" cy="1095.9609" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="208" x="11828" y="1099.3076">GetCachedSize() : int {query}</text><ellipse cx="11819" cy="1112.2578" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="218" x="11828" y="1115.6045">ByteSizeLong() : size_t {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1125.5547"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="463" x="11828" y="1131.9014">GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1141.8516"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="476" x="11828" y="1148.1982">FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1158.1484"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="203" x="11828" y="1164.4951">ArenaDtor(void* object) : void</text><ellipse cx="11819" cy="1177.4453" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="482" x="11828" y="1180.792">CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="11819" cy="1193.7422" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="260" x="11828" y="1197.0889">CopyFrom(const header&amp; from) : void</text><ellipse cx="11819" cy="1210.0391" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" text-decoration="underline" textLength="196" x="11828" y="1213.3857">InitAsDefaultInstance() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1223.3359"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="11828" y="1229.6826">InternalSwap(header* other) : void</text><ellipse cx="11819" cy="1242.6328" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="11828" y="1245.9795">MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message&amp; from) : void</text><ellipse cx="11819" cy="1258.9297" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="269" x="11828" y="1262.2764">MergeFrom(const header&amp; from) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1272.2266"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="481" x="11828" y="1278.5732">RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1288.5234"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="266" x="11828" y="1294.8701">SetCachedSize(int size) : void {query}</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1304.8203"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="11828" y="1311.167">SharedCtor() : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1321.1172"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="130" x="11828" y="1327.4639">SharedDtor() : void</text><ellipse cx="11819" cy="1340.4141" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="185" x="11828" y="1343.7607">Swap(header* other) : void</text><ellipse cx="11819" cy="1356.7109" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="273" x="11828" y="1360.0576">UnsafeArenaSwap(header* other) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1370.0078"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="501" x="11828" y="1376.3545">_internal_set_destmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><rect fill="#F24D5C" height="6" style="stroke:#C82930;stroke-width:1.0;" width="6" x="11816" y="1386.3047"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="491" x="11828" y="1392.6514">_internal_set_srcmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="11819" cy="1405.6016" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="151" x="11828" y="1408.9482">clear_destmac() : void</text><ellipse cx="11819" cy="1421.8984" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="141" x="11828" y="1425.2451">clear_srcmac() : void</text><ellipse cx="11819" cy="1438.1953" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="436" x="11828" y="1441.542">set_destmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="11819" cy="1454.4922" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="426" x="11828" y="1457.8389">set_srcmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void</text><ellipse cx="11819" cy="1470.7891" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="242" x="11828" y="1474.1357">swap(header&amp; a, header&amp; b) : void</text></g><!--MD5=[5012d8f814a4a431f7d123a8b97881f7]
class DataWarperPROTOBUF_FINAL::BodyCase--><g id="elem_DataWarperPROTOBUF_FINAL::BodyCase"><rect codeLine="602" fill="#F1F1F1" height="129.4844" id="DataWarperPROTOBUF_FINAL::BodyCase" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="315" x="133" y="2234.5"/><ellipse cx="148" cy="2250.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M152.1094,2256.5 L144.3906,2256.5 L144.3906,2244.1094 L152.1094,2244.1094 L152.1094,2246.2656 L146.8438,2246.2656 L146.8438,2248.9375 L151.6094,2248.9375 L151.6094,2251.0938 L146.8438,2251.0938 L146.8438,2254.3438 L152.1094,2254.3438 L152.1094,2256.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="162" y="2255.3467">DataWarperPROTOBUF_FINAL::BodyCase</text><line style="stroke:#181818;stroke-width:0.5;" x1="134" x2="447" y1="2266.5" y2="2266.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="112" x="139" y="2283.4951">BODY_NOT_SET</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="111" x="139" y="2299.792">kAckFrameBody</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="139" y="2316.0889">kAnnounceFrameBody</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="137" x="139" y="2332.3857">kConflictFrameBody</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="118" x="139" y="2348.6826">kDataFrameBody</text><line style="stroke:#181818;stroke-width:0.5;" x1="134" x2="447" y1="2355.9844" y2="2355.9844"/></g><!--MD5=[593b9b8f6a2cb6de7329de382efc3149]
class DataWarperPROTOBUF_FINAL::empty--><g id="elem_DataWarperPROTOBUF_FINAL::empty"><rect codeLine="611" fill="#F1F1F1" height="145.7813" id="DataWarperPROTOBUF_FINAL::empty" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="288" x="483.5" y="2226"/><ellipse cx="498.5" cy="2242" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M502.6094,2248 L494.8906,2248 L494.8906,2235.6094 L502.6094,2235.6094 L502.6094,2237.7656 L497.3438,2237.7656 L497.3438,2240.4375 L502.1094,2240.4375 L502.1094,2242.5938 L497.3438,2242.5938 L497.3438,2245.8438 L502.6094,2245.8438 L502.6094,2248 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="256" x="512.5" y="2246.8467">DataWarperPROTOBUF_FINAL::empty</text><line style="stroke:#181818;stroke-width:0.5;" x1="484.5" x2="770.5" y1="2258" y2="2258"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="198" x="489.5" y="2274.9951">kAckFrameBodyFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="244" x="489.5" y="2291.292">kAnnounceFrameBodyFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="489.5" y="2307.5889">kConflictFrameBodyFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="205" x="489.5" y="2323.8857">kDataFrameBodyFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="489.5" y="2340.1826">kHeaderFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="129" x="489.5" y="2356.4795">kTypeFieldNumber</text><line style="stroke:#181818;stroke-width:0.5;" x1="484.5" x2="770.5" y1="2363.7813" y2="2363.7813"/></g><!--MD5=[b0607810a27f0fbaa439e9825819b5a9]
class announceFrameBodyPROTOBUF_FINAL::empty--><g id="elem_announceFrameBodyPROTOBUF_FINAL::empty"><rect codeLine="621" fill="#F1F1F1" height="80.5938" id="announceFrameBodyPROTOBUF_FINAL::empty" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="355" x="8185" y="2258.5"/><ellipse cx="8200" cy="2274.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M8204.1094,2280.5 L8196.3906,2280.5 L8196.3906,2268.1094 L8204.1094,2268.1094 L8204.1094,2270.2656 L8198.8438,2270.2656 L8198.8438,2272.9375 L8203.6094,2272.9375 L8203.6094,2275.0938 L8198.8438,2275.0938 L8198.8438,2278.3438 L8204.1094,2278.3438 L8204.1094,2280.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="323" x="8214" y="2279.3467">announceFrameBodyPROTOBUF_FINAL::empty</text><line style="stroke:#181818;stroke-width:0.5;" x1="8186" x2="8539" y1="2290.5" y2="2290.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="168" x="8191" y="2307.4951">kNodeSendFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="165" x="8191" y="2323.792">kSendTimeFieldNumber</text><line style="stroke:#181818;stroke-width:0.5;" x1="8186" x2="8539" y1="2331.0938" y2="2331.0938"/></g><!--MD5=[403fcd708b66e456e10563eddc52930f]
class conflictFrameBodyPROTOBUF_FINAL::empty--><g id="elem_conflictFrameBodyPROTOBUF_FINAL::empty"><rect codeLine="627" fill="#F1F1F1" height="80.5938" id="conflictFrameBodyPROTOBUF_FINAL::empty" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="334" x="9467.5" y="2258.5"/><ellipse cx="9482.5" cy="2274.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M9486.6094,2280.5 L9478.8906,2280.5 L9478.8906,2268.1094 L9486.6094,2268.1094 L9486.6094,2270.2656 L9481.3438,2270.2656 L9481.3438,2272.9375 L9486.1094,2272.9375 L9486.1094,2275.0938 L9481.3438,2275.0938 L9481.3438,2278.3438 L9486.6094,2278.3438 L9486.6094,2280.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="302" x="9496.5" y="2279.3467">conflictFrameBodyPROTOBUF_FINAL::empty</text><line style="stroke:#181818;stroke-width:0.5;" x1="9468.5" x2="9800.5" y1="2290.5" y2="2290.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="9473.5" y="2307.4951">kNodeSend1FieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="177" x="9473.5" y="2323.792">kNodeSend2FieldNumber</text><line style="stroke:#181818;stroke-width:0.5;" x1="9468.5" x2="9800.5" y1="2331.0938" y2="2331.0938"/></g><!--MD5=[96c2953b0fbebb933f55a5b62b942fed]
class dataFrameBodyPROTOBUF_FINAL::empty--><g id="elem_dataFrameBodyPROTOBUF_FINAL::empty"><rect codeLine="633" fill="#F1F1F1" height="96.8906" id="dataFrameBodyPROTOBUF_FINAL::empty" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="315" x="10873" y="2250.5"/><ellipse cx="10888" cy="2266.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M10892.1094,2272.5 L10884.3906,2272.5 L10884.3906,2260.1094 L10892.1094,2260.1094 L10892.1094,2262.2656 L10886.8438,2262.2656 L10886.8438,2264.9375 L10891.6094,2264.9375 L10891.6094,2267.0938 L10886.8438,2267.0938 L10886.8438,2270.3438 L10892.1094,2270.3438 L10892.1094,2272.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="283" x="10902" y="2271.3467">dataFrameBodyPROTOBUF_FINAL::empty</text><line style="stroke:#181818;stroke-width:0.5;" x1="10874" x2="11187" y1="2282.5" y2="2282.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="127" x="10879" y="2299.4951">kDataFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="143" x="10879" y="2315.792">kLengthFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="157" x="10879" y="2332.0889">kTimeLastFieldNumber</text><line style="stroke:#181818;stroke-width:0.5;" x1="10874" x2="11187" y1="2339.3906" y2="2339.3906"/></g><!--MD5=[6abb1d7fbc825145dab0ee849492c455]
class headerPROTOBUF_FINAL::empty--><g id="elem_headerPROTOBUF_FINAL::empty"><rect codeLine="640" fill="#F1F1F1" height="80.5938" id="headerPROTOBUF_FINAL::empty" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="256" x="12298.5" y="2258.5"/><ellipse cx="12313.5" cy="2274.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M12317.6094,2280.5 L12309.8906,2280.5 L12309.8906,2268.1094 L12317.6094,2268.1094 L12317.6094,2270.2656 L12312.3438,2270.2656 L12312.3438,2272.9375 L12317.1094,2272.9375 L12317.1094,2275.0938 L12312.3438,2275.0938 L12312.3438,2278.3438 L12317.6094,2278.3438 L12317.6094,2280.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="224" x="12327.5" y="2279.3467">headerPROTOBUF_FINAL::empty</text><line style="stroke:#181818;stroke-width:0.5;" x1="12299.5" x2="12553.5" y1="2290.5" y2="2290.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="156" x="12304.5" y="2307.4951">kDestMacFieldNumber</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="145" x="12304.5" y="2323.792">kSrcMacFieldNumber</text><line style="stroke:#181818;stroke-width:0.5;" x1="12299.5" x2="12553.5" y1="2331.0938" y2="2331.0938"/></g><!--MD5=[cf7dbe2995ceb81880329e17a9e6244c]
class status--><g id="elem_status"><rect codeLine="646" fill="#F1F1F1" height="96.8906" id="status" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="75" x="7303" y="2250.5"/><ellipse cx="7318" cy="2266.5" fill="#EB937F" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M7322.1094,2272.5 L7314.3906,2272.5 L7314.3906,2260.1094 L7322.1094,2260.1094 L7322.1094,2262.2656 L7316.8438,2262.2656 L7316.8438,2264.9375 L7321.6094,2264.9375 L7321.6094,2267.0938 L7316.8438,2267.0938 L7316.8438,2270.3438 L7322.1094,2270.3438 L7322.1094,2272.5 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="43" x="7332" y="2271.3467">status</text><line style="stroke:#181818;stroke-width:0.5;" x1="7304" x2="7377" y1="2282.5" y2="2282.5"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="33" x="7309" y="2299.4951">busy</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="49" x="7309" y="2315.792">conflict</text><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="27" x="7309" y="2332.0889">free</text><line style="stroke:#181818;stroke-width:0.5;" x1="7304" x2="7377" y1="2339.3906" y2="2339.3906"/></g><!--MD5=[c69979fd69dbefd174ba658ee03248a5]
class DataWarperPROTOBUF_FINAL::BodyUnion--><g id="elem_DataWarperPROTOBUF_FINAL::BodyUnion"><rect codeLine="653" fill="#F1F1F1" height="129.4844" id="DataWarperPROTOBUF_FINAL::BodyUnion" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="354" x="806.5" y="2234.5"/><ellipse cx="836.8" cy="2250.5" fill="#ADD1B2" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M839.7688,2256.1406 Q839.1906,2256.4375 838.55,2256.5781 Q837.9094,2256.7344 837.2063,2256.7344 Q834.7063,2256.7344 833.3781,2255.0938 Q832.0656,2253.4375 832.0656,2250.3125 Q832.0656,2247.1875 833.3781,2245.5313 Q834.7063,2243.875 837.2063,2243.875 Q837.9094,2243.875 838.55,2244.0313 Q839.2063,2244.1875 839.7688,2244.4844 L839.7688,2247.2031 Q839.1438,2246.625 838.55,2246.3594 Q837.9563,2246.0781 837.3313,2246.0781 Q835.9875,2246.0781 835.3,2247.1563 Q834.6125,2248.2188 834.6125,2250.3125 Q834.6125,2252.4063 835.3,2253.4844 Q835.9875,2254.5469 837.3313,2254.5469 Q837.9563,2254.5469 838.55,2254.2813 Q839.1438,2254 839.7688,2253.4219 L839.7688,2256.1406 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="288" x="854.2" y="2255.3467">DataWarperPROTOBUF_FINAL::BodyUnion</text><line style="stroke:#181818;stroke-width:0.5;" x1="807.5" x2="1159.5" y1="2266.5" y2="2266.5"/><ellipse cx="817.5" cy="2280.1484" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="236" x="826.5" y="2283.4951">ackframebody_ : ::ackFrameBody*</text><ellipse cx="817.5" cy="2296.4453" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="328" x="826.5" y="2299.792">announceframebody_ : ::announceFrameBody*</text><ellipse cx="817.5" cy="2312.7422" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="286" x="826.5" y="2316.0889">conflictframebody_ : ::conflictFrameBody*</text><ellipse cx="817.5" cy="2329.0391" fill="none" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="248" x="826.5" y="2332.3857">dataframebody_ : ::dataFrameBody*</text><line style="stroke:#181818;stroke-width:0.5;" x1="807.5" x2="1159.5" y1="2339.6875" y2="2339.6875"/><ellipse cx="817.5" cy="2353.3359" fill="#84BE84" rx="3" ry="3" style="stroke:#038048;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="85" x="826.5" y="2356.6826">BodyUnion()</text></g><!--MD5=[b6bdf0440049ba9ef7cfa6c8244ecea7]
reverse link ListenThread_AP to NodeStatus--><g id="link_ListenThread_AP_NodeStatus"><path codeLine="672" d="M1257.03,2484.31 C1227.21,2500.87 1203.72,2518.74 1188.5,2538 C1108.04,2639.83 1115.72,2722.55 1188.5,2830 C1234.19,2897.45 1308.24,2940.83 1384.34,2968.73 " fill="none" id="ListenThread_AP-backto-NodeStatus" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1268.76,2478.03,1261.5824,2477.3362,1258.1813,2483.6948,1265.3589,2484.3887,1268.76,2478.03" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[fed86a1b4c525e29b232144ccdb5a0ca]
reverse link ListenThread_AP to ReceiveThread_AP--><g id="link_ListenThread_AP_ReceiveThread_AP"><path codeLine="675" d="M2179.52,2491.2 C2178.7,2506.88 2177.88,2522.56 2177.08,2537.82 " fill="none" id="ListenThread_AP-backto-ReceiveThread_AP" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="2180.2,2478.05,2175.8955,2483.8355,2179.5804,2490.034,2183.8848,2484.2485,2180.2,2478.05" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[6c58c6829523ace73299fa1863561ad7]
reverse link ListenThread_AP to Window_AP--><g id="link_ListenThread_AP_Window_AP"><path codeLine="678" d="M3076.54,2484.18 C3108.22,2500.87 3133.28,2518.79 3149.5,2538 C3254.85,2662.76 3220.59,2876.54 3198.29,2971.34 " fill="none" id="ListenThread_AP-backto-Window_AP" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="3064.57,2478.09,3068.1015,2484.3772,3075.2633,2483.5355,3071.7318,2477.2483,3064.57,2478.09" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[4c7d8e8d9b9c8d70ff7fb44eb8b17b1b]
reverse link NodeStatus to NodeInfo--><g id="link_NodeStatus_NodeInfo"><path codeLine="681" d="M1661.5,3163.24 C1661.5,3178.46 1661.5,3194.14 1661.5,3209.88 " fill="none" id="NodeStatus-backto-NodeInfo" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1661.5,3150.01,1657.5,3156.01,1661.5,3162.01,1665.5,3156.01,1661.5,3150.01" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[63aed6946fd170c56db105756288df28]
reverse link Process_AP to ListenThread_AP--><g id="link_Process_AP_ListenThread_AP"><path codeLine="684" d="M2696.37,1118.56 C2609.01,1321.84 2384.79,1843.58 2266,2119.99 " fill="none" id="Process_AP-backto-ListenThread_AP" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2701.55,1106.51,2695.5071,1110.4448,2696.815,1117.5363,2702.8579,1113.6015,2701.55,1106.51" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7fda17b4b87db94368b78a4bd65a90dc]
reverse link Process_AP to Window_AP--><g id="link_Process_AP_Window_AP"><path codeLine="687" d="M2781.62,1117.86 C2882.97,1295.03 3113.09,1725.17 3200.5,2120 C3240.67,2301.46 3209.83,2352.16 3212.5,2538 C3214.36,2667.76 3221.7,2700.55 3212.5,2830 C3209.06,2878.44 3200.71,2933.33 3194.2,2971.43 " fill="none" id="Process_AP-backto-Window_AP" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2775.13,1106.56,2774.6446,1113.7547,2781.0993,1116.97,2781.5846,1109.7752,2775.13,1106.56" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[dab1e2190c6992dccd3ac1632fc1ea72]
reverse link Process_Node to ThreadReceive_Node--><g id="link_Process_Node_ThreadReceive_Node"><path codeLine="690" d="M6018.38,1167.82 C5633.36,1411.97 4832.65,1927.89 4464.79,2168.89 " fill="none" id="Process_Node-backto-ThreadReceive_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6029.37,1160.85,6022.1608,1160.6851,6019.2358,1167.2763,6026.445,1167.4412,6029.37,1160.85" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[17334a71df209e8f1a7bc9e8ac629e31]
reverse link ThreadReceive_Node to Process_Node--><g id="link_ThreadReceive_Node_Process_Node"><path codeLine="708" d="M4492.5,2161.9 C4875.19,1919.39 5657.72,1415.2 6029.17,1171.82 " fill="none" id="ThreadReceive_Node-backto-Process_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4481.3,2168.99,4488.5091,2169.1592,4491.438,2162.5697,4484.2289,2162.4005,4481.3,2168.99" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[545433ccfe82d4ff54ea8682a0b71ba1]
reverse link Process_Node to ThreadSend_Node--><g id="link_Process_Node_ThreadSend_Node"><path codeLine="693" d="M6222.31,1347.87 C6219.59,1601.34 6220.42,1947.39 6224.81,2144.29 " fill="none" id="Process_Node-backto-ThreadSend_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="none" points="6222.46,1334.73,6218.3943,1340.6857,6222.3281,1346.7293,6226.3938,1340.7736,6222.46,1334.73" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[3e0097482a7d92a98f949899fe577f99]
reverse link ThreadSend_Node to Process_Node--><g id="link_ThreadSend_Node_Process_Node"><path codeLine="714" d="M6243,2131.17 C6247.46,1928.78 6248.19,1583.79 6245.19,1334.73 " fill="none" id="ThreadSend_Node-backto-Process_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6242.7,2144.29,6246.8374,2138.3839,6242.9768,2132.2932,6238.8395,2138.1993,6242.7,2144.29" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7f7a9ed8d9c5dcc399d283e047aa7025]
reverse link Process_Node to Window_Node--><g id="link_Process_Node_Window_Node"><path codeLine="696" d="M6210.01,1347.89 C6211.27,1580.44 6255.81,1886.19 6454.5,2060 C6581.84,2171.4 7098.67,1995.74 7213.5,2120 C7267.49,2178.43 7263.67,2416.25 7213.5,2478 C7106.98,2609.11 6597.24,2659.31 6358.01,2675.87 " fill="none" id="Process_Node-backto-Window_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6209.99,1334.78,6206.0032,1340.7888,6210.0164,1346.78,6214.0032,1340.7712,6209.99,1334.78" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[907e4235ed8a77d97dbf03a62a2260e7]
reverse link Process_Node to status--><g id="link_Process_Node_status"><path codeLine="699" d="M6209.72,1347.63 C6210.75,1580.44 6255.13,1886.63 6454.5,2060 C6592.54,2180.04 7129.52,2009.76 7275.5,2120 C7315.93,2150.53 7331.24,2208.74 7337.02,2250.29 " fill="none" id="Process_Node-backto-status" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6209.71,1334.51,6205.7166,1340.5144,6209.7232,1346.51,6213.7166,1340.5056,6209.71,1334.51" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[7a6ff9295184aa2ead518dc75c7de24d]
reverse link ReceiveThread_AP to NodeStatus--><g id="link_ReceiveThread_AP_NodeStatus"><path codeLine="702" d="M1937.88,2837.28 C1911.18,2854.84 1884.14,2872.62 1857.96,2889.83 " fill="none" id="ReceiveThread_AP-backto-NodeStatus" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="1948.9,2830.04,1941.689,2829.996,1938.875,2836.6354,1946.086,2836.6794,1948.9,2830.04" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[c110a100beb1dbfa5c18b65462a8aa58]
reverse link ReceiveThread_AP to Window_AP--><g id="link_ReceiveThread_AP_Window_AP"><path codeLine="705" d="M2623.06,2834.1 C2787.94,2888.3 2960.55,2945.05 3070.35,2981.15 " fill="none" id="ReceiveThread_AP-backto-Window_AP" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="2610.7,2830.04,2615.1509,2835.7136,2622.0999,2833.7872,2617.649,2828.1136,2610.7,2830.04" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[1b4625883c7189ae9eec262dd7430b5d]
reverse link ThreadReceive_Node to Window_Node--><g id="link_ThreadReceive_Node_Window_Node"><path codeLine="711" d="M4946.15,2431.57 C5369.54,2514.26 5877.82,2613.53 6108.59,2658.6 " fill="none" id="ThreadReceive_Node-backto-Window_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="4933.33,2429.07,4938.4542,2434.1437,4945.1085,2431.365,4939.9843,2426.2913,4933.33,2429.07" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[1687125fdea03de66b3f98ddf8fc3e07]
reverse link ThreadSend_Node to Window_Node--><g id="link_ThreadSend_Node_Window_Node"><path codeLine="717" d="M6233.5,2466.62 C6233.5,2528.06 6233.5,2592.97 6233.5,2635.49 " fill="none" id="ThreadSend_Node-backto-Window_Node" style="stroke:#181818;stroke-width:1.0;"/><polygon fill="#181818" points="6233.5,2453.57,6229.5,2459.57,6233.5,2465.57,6237.5,2459.57,6233.5,2453.57" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[f562effde04abe0259bc07bcf1ec9f12]
reverse link DataWarperPROTOBUF_FINAL to DataWarperPROTOBUF_FINAL::BodyCase--><g id="link_DataWarperPROTOBUF_FINAL_DataWarperPROTOBUF_FINAL::BodyCase"><path codeLine="726" d="M350.01,2074.87 C332.61,2140.12 317.92,2195.18 307.5,2234.28 " fill="none" id="DataWarperPROTOBUF_FINAL-backto-DataWarperPROTOBUF_FINAL::BodyCase" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="351.8315" cy="2068.0806" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="349.7731" x2="353.89" y1="2075.8113" y2="2060.35"/><line style="stroke:#181818;stroke-width:1.0;" x1="344.1009" x2="359.5622" y1="2066.0222" y2="2070.1391"/></g><!--MD5=[4efdb29445e70db5b6c9b5369ef329b3]
reverse link DataWarperPROTOBUF_FINAL to DataWarperPROTOBUF_FINAL::BodyUnion--><g id="link_DataWarperPROTOBUF_FINAL_DataWarperPROTOBUF_FINAL::BodyUnion"><path codeLine="729" d="M920.63,2074.87 C939.02,2140.12 954.53,2195.18 965.55,2234.28 " fill="none" id="DataWarperPROTOBUF_FINAL-backto-DataWarperPROTOBUF_FINAL::BodyUnion" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="918.7106" cy="2068.0499" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="920.8812" x2="916.54" y1="2075.7498" y2="2060.35"/><line style="stroke:#181818;stroke-width:1.0;" x1="911.0107" x2="926.4105" y1="2070.2205" y2="2065.8793"/></g><!--MD5=[cc9b26922a813bda435a58a8f5d921fc]
reverse link DataWarperPROTOBUF_FINAL to DataWarperPROTOBUF_FINAL::empty--><g id="link_DataWarperPROTOBUF_FINAL_DataWarperPROTOBUF_FINAL::empty"><path codeLine="732" d="M627.5,2075.47 C627.5,2135.9 627.5,2187.56 627.5,2225.85 " fill="none" id="DataWarperPROTOBUF_FINAL-backto-DataWarperPROTOBUF_FINAL::empty" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="627.5" cy="2068.35" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="627.5" x2="627.5" y1="2076.35" y2="2060.35"/><line style="stroke:#181818;stroke-width:1.0;" x1="619.5" x2="635.5" y1="2068.35" y2="2068.35"/></g><!--MD5=[3141305c2d7b5a2e450597453f9c30a8]
reverse link announceFrameBodyPROTOBUF_FINAL to announceFrameBodyPROTOBUF_FINAL::empty--><g id="link_announceFrameBodyPROTOBUF_FINAL_announceFrameBodyPROTOBUF_FINAL::empty"><path codeLine="735" d="M8362.5,1496.67 C8362.5,1792.44 8362.5,2141.77 8362.5,2258.1 " fill="none" id="announceFrameBodyPROTOBUF_FINAL-backto-announceFrameBodyPROTOBUF_FINAL::empty" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="8362.5" cy="1489.3" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="8362.5" x2="8362.5" y1="1497.3" y2="1481.3"/><line style="stroke:#181818;stroke-width:1.0;" x1="8354.5" x2="8370.5" y1="1489.3" y2="1489.3"/></g><!--MD5=[f3afe52346720072369739e894bd3498]
reverse link conflictFrameBodyPROTOBUF_FINAL to conflictFrameBodyPROTOBUF_FINAL::empty--><g id="link_conflictFrameBodyPROTOBUF_FINAL_conflictFrameBodyPROTOBUF_FINAL::empty"><path codeLine="738" d="M9634.5,1496.67 C9634.5,1792.44 9634.5,2141.77 9634.5,2258.1 " fill="none" id="conflictFrameBodyPROTOBUF_FINAL-backto-conflictFrameBodyPROTOBUF_FINAL::empty" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="9634.5" cy="1489.3" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="9634.5" x2="9634.5" y1="1497.3" y2="1481.3"/><line style="stroke:#181818;stroke-width:1.0;" x1="9626.5" x2="9642.5" y1="1489.3" y2="1489.3"/></g><!--MD5=[efc42d060840c61fd8221f1c23e15331]
reverse link dataFrameBodyPROTOBUF_FINAL to dataFrameBodyPROTOBUF_FINAL::empty--><g id="link_dataFrameBodyPROTOBUF_FINAL_dataFrameBodyPROTOBUF_FINAL::empty"><path codeLine="741" d="M11030.5,1619.24 C11030.5,1876.51 11030.5,2144.23 11030.5,2250.48 " fill="none" id="dataFrameBodyPROTOBUF_FINAL-backto-dataFrameBodyPROTOBUF_FINAL::empty" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="11030.5" cy="1611.87" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="11030.5" x2="11030.5" y1="1619.87" y2="1603.87"/><line style="stroke:#181818;stroke-width:1.0;" x1="11022.5" x2="11038.5" y1="1611.87" y2="1611.87"/></g><!--MD5=[412bdacfdc031e8c8a00cdfccb6f824d]
reverse link headerPROTOBUF_FINAL to headerPROTOBUF_FINAL::empty--><g id="link_headerPROTOBUF_FINAL_headerPROTOBUF_FINAL::empty"><path codeLine="744" d="M12426.5,1496.67 C12426.5,1792.44 12426.5,2141.77 12426.5,2258.1 " fill="none" id="headerPROTOBUF_FINAL-backto-headerPROTOBUF_FINAL::empty" style="stroke:#181818;stroke-width:1.0;"/><ellipse cx="12426.5" cy="1489.3" fill="#FFFFFF" rx="8" ry="8" style="stroke:#181818;stroke-width:1.0;"/><line style="stroke:#181818;stroke-width:1.0;" x1="12426.5" x2="12426.5" y1="1497.3" y2="1481.3"/><line style="stroke:#181818;stroke-width:1.0;" x1="12418.5" x2="12434.5" y1="1489.3" y2="1489.3"/></g><!--MD5=[a41d2266521b58175d5b6ee4257f93bb]
@startuml myDiagram





/' Objects '/

class DataWarperPROTOBUF_FINAL {
	+DataWarper()
	+DataWarper(const DataWarper& from)
	+DataWarper(DataWarper&& from)
	#DataWarper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~DataWarper()
	-_internal_type() : ::DataWarper_frameType {query}
	+type() : ::DataWarper_frameType {query}
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_oneof_case_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	-_internal_mutable_ackframebody() : ::ackFrameBody*
	+mutable_ackframebody() : ::ackFrameBody*
	+release_ackframebody() : ::ackFrameBody*
	+unsafe_arena_release_ackframebody() : ::ackFrameBody*
	-_internal_mutable_announceframebody() : ::announceFrameBody*
	+mutable_announceframebody() : ::announceFrameBody*
	+release_announceframebody() : ::announceFrameBody*
	+unsafe_arena_release_announceframebody() : ::announceFrameBody*
	-_internal_mutable_conflictframebody() : ::conflictFrameBody*
	+mutable_conflictframebody() : ::conflictFrameBody*
	+release_conflictframebody() : ::conflictFrameBody*
	+unsafe_arena_release_conflictframebody() : ::conflictFrameBody*
	-_internal_mutable_dataframebody() : ::dataFrameBody*
	+mutable_dataframebody() : ::dataFrameBody*
	+release_dataframebody() : ::dataFrameBody*
	+unsafe_arena_release_dataframebody() : ::dataFrameBody*
	-_internal_mutable_header() : ::header*
	-header_ : ::header*
	+mutable_header() : ::header*
	+release_header() : ::header*
	+unsafe_arena_release_header() : ::header*
	-body_ : BodyUnion
	+{static} default_instance() : DataWarper&
	+operator=(const DataWarper& from) : DataWarper&
	+operator=(DataWarper&& from) : DataWarper&
	+New() : DataWarper* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : DataWarper* {query}
	+{static} internal_default_instance() : DataWarper*
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	-_internal_has_ackframebody() : bool {query}
	-_internal_has_announceframebody() : bool {query}
	-_internal_has_conflictframebody() : bool {query}
	-_internal_has_dataframebody() : bool {query}
	-_internal_has_header() : bool {query}
	+{static} frameType_IsValid(int value) : bool
	+{static} frameType_Parse(const std::string& name, frameType* value) : bool
	+has_ackframebody() : bool {query}
	+has_announceframebody() : bool {query}
	-has_body() : bool {query}
	+has_conflictframebody() : bool {query}
	+has_dataframebody() : bool {query}
	+has_header() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} frameType_descriptor() : const::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	-_internal_ackframebody() : const::ackFrameBody& {query}
	+ackframebody() : const::ackFrameBody& {query}
	-_internal_announceframebody() : const::announceFrameBody& {query}
	+announceframebody() : const::announceFrameBody& {query}
	-_internal_conflictframebody() : const::conflictFrameBody& {query}
	+conflictframebody() : const::conflictFrameBody& {query}
	-_internal_dataframebody() : const::dataFrameBody& {query}
	+dataframebody() : const::dataFrameBody& {query}
	-_internal_header() : const::header& {query}
	+header() : const::header& {query}
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	+body_case() : int {query}
	-type_ : int
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} ackFrame : static constexpr frameType
	+{static} announceFrame : static constexpr frameType
	+{static} conflictFrame : static constexpr frameType
	+{static} dataFrame : static constexpr frameType
	+{static} frameType_MAX : static constexpr frameType
	+{static} frameType_MIN : static constexpr frameType
	+{static} frameType_ARRAYSIZE : static constexpr int
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	+{static} frameType_Name(T enum_t_value) : std::string&
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const DataWarper& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(DataWarper* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const DataWarper& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(DataWarper* other) : void
	+UnsafeArenaSwap(DataWarper* other) : void
	-_internal_set_type(::DataWarper_frameType value) : void
	+clear_ackframebody() : void
	+clear_announceframebody() : void
	+clear_body() : void
	+clear_conflictframebody() : void
	+clear_dataframebody() : void
	-clear_has_body() : void
	+clear_header() : void
	+clear_type() : void
	+set_allocated_ackframebody(::ackFrameBody* ackframebody) : void
	+set_allocated_announceframebody(::announceFrameBody* announceframebody) : void
	+set_allocated_conflictframebody(::conflictFrameBody* conflictframebody) : void
	+set_allocated_dataframebody(::dataFrameBody* dataframebody) : void
	+set_allocated_header(::header* header) : void
	-set_has_ackframebody() : void
	-set_has_announceframebody() : void
	-set_has_conflictframebody() : void
	-set_has_dataframebody() : void
	+set_type(::DataWarper_frameType value) : void
	+swap(DataWarper& a, DataWarper& b) : void
	+unsafe_arena_set_allocated_ackframebody(::ackFrameBody* ackframebody) : void
	+unsafe_arena_set_allocated_announceframebody(::announceFrameBody* announceframebody) : void
	+unsafe_arena_set_allocated_conflictframebody(::conflictFrameBody* conflictframebody) : void
	+unsafe_arena_set_allocated_dataframebody(::dataFrameBody* dataframebody) : void
	+unsafe_arena_set_allocated_header(::header* header) : void
}


class ListenThread_AP {
	+ListenThread_AP(Window_AP& window, uint16_t port, address ip, QObject* parent)
	+~ListenThread_AP()
	-status_ : NodeStatus
	-window_ : Window_AP&
	+getListenFlag() : bool
	-listen_flag_ : bool
	-io_context_ : io_context
	-listen_mutex_ : shared_mutex
	-log_mutex_ : shared_mutex
	-status_mutex_ : shared_mutex
	#messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : signals : void
	-receive_threads_ : std::map<endpoint_t, ReceiveThread_AP*>
	-acceptor_ : unique_ptr<acceptor_t, del_t>
	#acceptHandler(const boost::system::error_code& ec, shared_ptr<socket_t> socket_server) : void
	#appendLogSignal(const QString &) : void
	#run() : void
	+setListenFlag(bool flag) : void
	#startAccept() : void
	+stop() : void
}


class NodeInfo {
	+NodeInfo(byte mac_address, address ip_address, uint16_t port, shared_ptr<boost::asio::ip::tcp::socket> socket)
	+NodeInfo(NodeInfo&& node)
	+NodeInfo(const NodeInfo& node)
	+operator=(NodeInfo&& node) : NodeInfo&
	+operator=(const NodeInfo& node) : NodeInfo&
	+getTime() : QTime
	+time_ : QTime
	+ip_address_ : address
	+isSend() : bool
	+is_send_ : bool
	+mac_address_ : byte
	+getIP() : ip_t
	+getMac() : mac_t
	+getPort() : port_t
	-mutex_ : shared_mutex
	+port_ : uint16_t
	+setIP(address ip_address) : void
	+setMac(byte mac_address) : void
	+setPort(uint16_t port) : void
	+setSend(bool is_send) : void
	+setTime(QTime time) : void
	+socket_ : weak_ptr<boost::asio::ip::tcp::socket>
}


class NodeStatus {
	+NodeStatus()
	+addNode(NodeInfo&& node) : NodeInfo&
	+getNode(mac_t mac_address) : NodeInfo&
	-lastsend_ : QTime
	+isConflicting(mac_t mac_address_src, mac_t mac_conflict, bool& send) : bool
	-lastmac_ : mac_t
	-list_mutex_ : shared_mutex
	-mutex_ : shared_mutex
	-nodes_ : std::list<NodeInfo>
	+getNodes() : std::list<NodeInfo>&
	-lastsend_list_ : std::list<std::tuple<QTime, mac_t, bool>>
	+addLastSend(QTime lastsend, mac_t lastmac) : void
	+removeNode(mac_t mac_address) : void
}


class Process_AP {
	+Process_AP(int& argc, char** argv)
	+~Process_AP()
	-window_ : Window_AP
	-ip_address_ : address
	-listen_thread_ : std::unique_ptr<ListenThread_AP>
	-port_ : uint16_t
}


class Process_Node {
	-~Process_Node()
	-frontQueue() : DataWarper&
	-gettime() : QTime
	-transform_time_ : QTime
	-thread_receive_ : ThreadReceive_Node*
	-thread_send_ : ThreadSend_Node*
	-window_ : Window_Node
	-address_current_ : address
	-address_server_ : address
	+connected_ : bool
	-isQueueEmpty() : bool
	-mac_current_ : byte
	-buffer : char
	-backoff_time_ : int
	-getstatus() : int
	-io_context_ : io_context
	-queue_ : queue<DataWarper>
	-opinion_ : reuse_address
	-queue_lock_ : shared_mutex
	-status_lock_ : shared_mutex
	-time_lock_ : shared_mutex
	-socket_client_ : shared_ptr<socket_t>
	-Process_Node(int& argc, char** argv) : signals : public :
	-{static} bufsize : static constexpr size_t
	-{static} max_thread : static constexpr std::size_t
	-status_ : status
	-backoff_counter_ : uint16_t
	-port_current_ : uint16_t
	-port_server_ : uint16_t
	-cleanQueue() : void
	-popQueue() : void
	-pushQueue(const DataWarper& data) : void
	-setstatus(status status) : void
	-settime(QTime time) : void
}


class ReceiveThread_AP {
	+ReceiveThread_AP(shared_ptr<socket_t> socket_server, shared_mutex log_mutex, shared_mutex status_mutex, NodeStatus& status, Window_AP& window, QObject* parent)
	+~ReceiveThread_AP()
	-status_ : NodeStatus&
	-window_ : Window_AP&
	-log_mutex_ : shared_mutex
	-status_mutex_ : shared_mutex
	-socket_server_ : shared_ptr<socket_t>
	#showStatusSignal(const NodeInfo &) : signals : void
	#appendLogSignal(const QString &) : void
	#messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void
	#run() : void
	-sendACK(byte mac_src, byte mac_dest) : void
	-sendAnnounce(byte sender, QTime send_time) : void
	-sendConflict(byte sender1, byte sender2) : void
	-showStatus(const NodeInfo& nodeinfo) : void
}


class ThreadReceive_Node {
	+ThreadReceive_Node(Process_Node& node, Window_Node& window, shared_ptr<socket_t> socket_client, io_context io_context, byte mac_current, QObject* parent)
	+~ThreadReceive_Node()
	-app_ : Process_Node&
	-window_ : Window_Node&
	-mac_current_ : byte
	-buffer : char
	-io_context_ : io_context
	-socket_client_ : shared_ptr<socket_t>
	+taskend() : signals : void
	+messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void
	-receiveHandler(const boost::system::error_code& ec, size_t bytes_transferred) : void
	#run() : void
	+setText(const QString &) : void
}


class ThreadSend_Node {
	+ThreadSend_Node(Window_Node& window, Process_Node& node, shared_ptr<socket_t> socket_client, byte mac_current, QObject* parent)
	+~ThreadSend_Node()
	-app_ : Process_Node&
	-window_ : Window_Node&
	+getSending() : bool
	-sending_ : bool
	-mac_current_ : byte
	-backoff_time_ : int
	-sending_lock_ : mutex
	-socket_client_ : shared_ptr<socket_t>
	+setText(const QString &) : signals : void
	-backoff_counter_ : uint16_t
	+messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void
	#run() : void
	+setSending(bool sending) : void
	+taskend() : void
}


class Window_AP {
	+Window_AP(QWidget* parent)
	+~Window_AP()
	+ui_ : Ui::UI_ap*
}


class Window_Node {
	+Window_Node(QWidget* parent)
	+~Window_Node()
	+ui_ : Ui::UI_node*
}


class ackFrameBodyPROTOBUF_FINAL {
	+ackFrameBody()
	+ackFrameBody(const ackFrameBody& from)
	+ackFrameBody(ackFrameBody&& from)
	#ackFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~ackFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+{static} default_instance() : ackFrameBody&
	+operator=(const ackFrameBody& from) : ackFrameBody&
	+operator=(ackFrameBody&& from) : ackFrameBody&
	+New() : ackFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : ackFrameBody* {query}
	+{static} internal_default_instance() : ackFrameBody*
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const ackFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(ackFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const ackFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(ackFrameBody* other) : void
	+UnsafeArenaSwap(ackFrameBody* other) : void
	+swap(ackFrameBody& a, ackFrameBody& b) : void
}


class announceFrameBodyPROTOBUF_FINAL {
	+announceFrameBody()
	+announceFrameBody(const announceFrameBody& from)
	+announceFrameBody(announceFrameBody&& from)
	#announceFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~announceFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_internal_nodesend() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_sendtime() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+nodesend() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-nodesend_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+sendtime() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-sendtime_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+{static} default_instance() : announceFrameBody&
	+operator=(const announceFrameBody& from) : announceFrameBody&
	+operator=(announceFrameBody&& from) : announceFrameBody&
	+New() : announceFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : announceFrameBody* {query}
	+{static} internal_default_instance() : announceFrameBody*
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const announceFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(announceFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const announceFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(announceFrameBody* other) : void
	+UnsafeArenaSwap(announceFrameBody* other) : void
	-_internal_set_nodesend(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_nodesend() : void
	+clear_sendtime() : void
	+set_nodesend(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_sendtime(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(announceFrameBody& a, announceFrameBody& b) : void
}


class conflictFrameBodyPROTOBUF_FINAL {
	+conflictFrameBody()
	+conflictFrameBody(const conflictFrameBody& from)
	+conflictFrameBody(conflictFrameBody&& from)
	#conflictFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~conflictFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_internal_nodesend1() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_nodesend2() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+nodesend1() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-nodesend1_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+nodesend2() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-nodesend2_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} default_instance() : conflictFrameBody&
	+operator=(const conflictFrameBody& from) : conflictFrameBody&
	+operator=(conflictFrameBody&& from) : conflictFrameBody&
	+New() : conflictFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : conflictFrameBody* {query}
	+{static} internal_default_instance() : conflictFrameBody*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const conflictFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(conflictFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const conflictFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(conflictFrameBody* other) : void
	+UnsafeArenaSwap(conflictFrameBody* other) : void
	-_internal_set_nodesend1(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_nodesend2(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_nodesend1() : void
	+clear_nodesend2() : void
	+set_nodesend1(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_nodesend2(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(conflictFrameBody& a, conflictFrameBody& b) : void
}


class dataFrameBodyPROTOBUF_FINAL {
	+GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for" " string fields are deprecated and will be removed in a" " future release." ) std::string* unsafe_arena_release_data ()
	+GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for" " string fields are deprecated and will be removed in a" " future release." ) void unsafe_arena_set_allocated_data ( std::string* data)
	+dataFrameBody()
	+dataFrameBody(const dataFrameBody& from)
	+dataFrameBody(dataFrameBody&& from)
	#dataFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~dataFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-data_ : ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr
	-_internal_length() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_timelast() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+length() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-length_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+timelast() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-timelast_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	+{static} default_instance() : dataFrameBody&
	+operator=(const dataFrameBody& from) : dataFrameBody&
	+operator=(dataFrameBody&& from) : dataFrameBody&
	+New() : dataFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : dataFrameBody* {query}
	+{static} internal_default_instance() : dataFrameBody*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-_internal_data() : std::string& {query}
	+data() : std::string& {query}
	-_internal_mutable_data() : std::string*
	+mutable_data() : std::string*
	+release_data() : std::string*
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const dataFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(dataFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const dataFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(dataFrameBody* other) : void
	+UnsafeArenaSwap(dataFrameBody* other) : void
	-_internal_set_data(const std::string& value) : void
	-_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_timelast(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_data() : void
	+clear_length() : void
	+clear_timelast() : void
	+set_allocated_data(std::string* data) : void
	+set_data(const std::string& value) : void
	+set_data(std::string&& value) : void
	+set_data(const char* value) : void
	+set_data(const void* value, size_t size) : void
	+set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_timelast(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(dataFrameBody& a, dataFrameBody& b) : void
}


class headerPROTOBUF_FINAL {
	+header()
	+header(const header& from)
	+header(header&& from)
	#header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~header()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_internal_destmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_srcmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+destmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-destmac_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+srcmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-srcmac_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+{static} default_instance() : header&
	+operator=(const header& from) : header&
	+operator=(header&& from) : header&
	+New() : header* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : header* {query}
	+{static} internal_default_instance() : header*
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const header& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(header* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const header& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(header* other) : void
	+UnsafeArenaSwap(header* other) : void
	-_internal_set_destmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_srcmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_destmac() : void
	+clear_srcmac() : void
	+set_destmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_srcmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(header& a, header& b) : void
}


enum DataWarperPROTOBUF_FINAL::BodyCase {
	BODY_NOT_SET
	kAckFrameBody
	kAnnounceFrameBody
	kConflictFrameBody
	kDataFrameBody
}


enum DataWarperPROTOBUF_FINAL::empty {
	kAckFrameBodyFieldNumber
	kAnnounceFrameBodyFieldNumber
	kConflictFrameBodyFieldNumber
	kDataFrameBodyFieldNumber
	kHeaderFieldNumber
	kTypeFieldNumber
}


enum announceFrameBodyPROTOBUF_FINAL::empty {
	kNodeSendFieldNumber
	kSendTimeFieldNumber
}


enum conflictFrameBodyPROTOBUF_FINAL::empty {
	kNodeSend1FieldNumber
	kNodeSend2FieldNumber
}


enum dataFrameBodyPROTOBUF_FINAL::empty {
	kDataFieldNumber
	kLengthFieldNumber
	kTimeLastFieldNumber
}


enum headerPROTOBUF_FINAL::empty {
	kDestMacFieldNumber
	kSrcMacFieldNumber
}


enum status {
	busy
	conflict
	free
}


class DataWarperPROTOBUF_FINAL::BodyUnion {
	+BodyUnion()
	+ackframebody_ : ::ackFrameBody*
	+announceframebody_ : ::announceFrameBody*
	+conflictframebody_ : ::conflictFrameBody*
	+dataframebody_ : ::dataFrameBody*
}





/' Inheritance relationships '/




/' Aggregation relationships '/

.ListenThread_AP *- - .NodeStatus


.ListenThread_AP o- - .ReceiveThread_AP


.ListenThread_AP *- - .Window_AP


.NodeStatus *- - .NodeInfo


.Process_AP *- - .ListenThread_AP


.Process_AP *- - .Window_AP


.Process_Node o- - .ThreadReceive_Node


.Process_Node o- - .ThreadSend_Node


.Process_Node *- - .Window_Node


.Process_Node *- - .status


.ReceiveThread_AP *- - .NodeStatus


.ReceiveThread_AP *- - .Window_AP


.ThreadReceive_Node *- - .Process_Node


.ThreadReceive_Node *- - .Window_Node


.ThreadSend_Node *- - .Process_Node


.ThreadSend_Node *- - .Window_Node






/' Nested objects '/

.DataWarperPROTOBUF_FINAL +- - .DataWarperPROTOBUF_FINAL::BodyCase


.DataWarperPROTOBUF_FINAL +- - .DataWarperPROTOBUF_FINAL::BodyUnion


.DataWarperPROTOBUF_FINAL +- - .DataWarperPROTOBUF_FINAL::empty


.announceFrameBodyPROTOBUF_FINAL +- - .announceFrameBodyPROTOBUF_FINAL::empty


.conflictFrameBodyPROTOBUF_FINAL +- - .conflictFrameBodyPROTOBUF_FINAL::empty


.dataFrameBodyPROTOBUF_FINAL +- - .dataFrameBodyPROTOBUF_FINAL::empty


.headerPROTOBUF_FINAL +- - .headerPROTOBUF_FINAL::empty




@enduml

@startuml myDiagram






class DataWarperPROTOBUF_FINAL {
	+DataWarper()
	+DataWarper(const DataWarper& from)
	+DataWarper(DataWarper&& from)
	#DataWarper(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~DataWarper()
	-_internal_type() : ::DataWarper_frameType {query}
	+type() : ::DataWarper_frameType {query}
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_oneof_case_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	-_internal_mutable_ackframebody() : ::ackFrameBody*
	+mutable_ackframebody() : ::ackFrameBody*
	+release_ackframebody() : ::ackFrameBody*
	+unsafe_arena_release_ackframebody() : ::ackFrameBody*
	-_internal_mutable_announceframebody() : ::announceFrameBody*
	+mutable_announceframebody() : ::announceFrameBody*
	+release_announceframebody() : ::announceFrameBody*
	+unsafe_arena_release_announceframebody() : ::announceFrameBody*
	-_internal_mutable_conflictframebody() : ::conflictFrameBody*
	+mutable_conflictframebody() : ::conflictFrameBody*
	+release_conflictframebody() : ::conflictFrameBody*
	+unsafe_arena_release_conflictframebody() : ::conflictFrameBody*
	-_internal_mutable_dataframebody() : ::dataFrameBody*
	+mutable_dataframebody() : ::dataFrameBody*
	+release_dataframebody() : ::dataFrameBody*
	+unsafe_arena_release_dataframebody() : ::dataFrameBody*
	-_internal_mutable_header() : ::header*
	-header_ : ::header*
	+mutable_header() : ::header*
	+release_header() : ::header*
	+unsafe_arena_release_header() : ::header*
	-body_ : BodyUnion
	+{static} default_instance() : DataWarper&
	+operator=(const DataWarper& from) : DataWarper&
	+operator=(DataWarper&& from) : DataWarper&
	+New() : DataWarper* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : DataWarper* {query}
	+{static} internal_default_instance() : DataWarper*
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	-_internal_has_ackframebody() : bool {query}
	-_internal_has_announceframebody() : bool {query}
	-_internal_has_conflictframebody() : bool {query}
	-_internal_has_dataframebody() : bool {query}
	-_internal_has_header() : bool {query}
	+{static} frameType_IsValid(int value) : bool
	+{static} frameType_Parse(const std::string& name, frameType* value) : bool
	+has_ackframebody() : bool {query}
	+has_announceframebody() : bool {query}
	-has_body() : bool {query}
	+has_conflictframebody() : bool {query}
	+has_dataframebody() : bool {query}
	+has_header() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} frameType_descriptor() : const::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	-_internal_ackframebody() : const::ackFrameBody& {query}
	+ackframebody() : const::ackFrameBody& {query}
	-_internal_announceframebody() : const::announceFrameBody& {query}
	+announceframebody() : const::announceFrameBody& {query}
	-_internal_conflictframebody() : const::conflictFrameBody& {query}
	+conflictframebody() : const::conflictFrameBody& {query}
	-_internal_dataframebody() : const::dataFrameBody& {query}
	+dataframebody() : const::dataFrameBody& {query}
	-_internal_header() : const::header& {query}
	+header() : const::header& {query}
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	+body_case() : int {query}
	-type_ : int
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} ackFrame : static constexpr frameType
	+{static} announceFrame : static constexpr frameType
	+{static} conflictFrame : static constexpr frameType
	+{static} dataFrame : static constexpr frameType
	+{static} frameType_MAX : static constexpr frameType
	+{static} frameType_MIN : static constexpr frameType
	+{static} frameType_ARRAYSIZE : static constexpr int
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	+{static} frameType_Name(T enum_t_value) : std::string&
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const DataWarper& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(DataWarper* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const DataWarper& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(DataWarper* other) : void
	+UnsafeArenaSwap(DataWarper* other) : void
	-_internal_set_type(::DataWarper_frameType value) : void
	+clear_ackframebody() : void
	+clear_announceframebody() : void
	+clear_body() : void
	+clear_conflictframebody() : void
	+clear_dataframebody() : void
	-clear_has_body() : void
	+clear_header() : void
	+clear_type() : void
	+set_allocated_ackframebody(::ackFrameBody* ackframebody) : void
	+set_allocated_announceframebody(::announceFrameBody* announceframebody) : void
	+set_allocated_conflictframebody(::conflictFrameBody* conflictframebody) : void
	+set_allocated_dataframebody(::dataFrameBody* dataframebody) : void
	+set_allocated_header(::header* header) : void
	-set_has_ackframebody() : void
	-set_has_announceframebody() : void
	-set_has_conflictframebody() : void
	-set_has_dataframebody() : void
	+set_type(::DataWarper_frameType value) : void
	+swap(DataWarper& a, DataWarper& b) : void
	+unsafe_arena_set_allocated_ackframebody(::ackFrameBody* ackframebody) : void
	+unsafe_arena_set_allocated_announceframebody(::announceFrameBody* announceframebody) : void
	+unsafe_arena_set_allocated_conflictframebody(::conflictFrameBody* conflictframebody) : void
	+unsafe_arena_set_allocated_dataframebody(::dataFrameBody* dataframebody) : void
	+unsafe_arena_set_allocated_header(::header* header) : void
}


class ListenThread_AP {
	+ListenThread_AP(Window_AP& window, uint16_t port, address ip, QObject* parent)
	+~ListenThread_AP()
	-status_ : NodeStatus
	-window_ : Window_AP&
	+getListenFlag() : bool
	-listen_flag_ : bool
	-io_context_ : io_context
	-listen_mutex_ : shared_mutex
	-log_mutex_ : shared_mutex
	-status_mutex_ : shared_mutex
	#messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : signals : void
	-receive_threads_ : std::map<endpoint_t, ReceiveThread_AP*>
	-acceptor_ : unique_ptr<acceptor_t, del_t>
	#acceptHandler(const boost::system::error_code& ec, shared_ptr<socket_t> socket_server) : void
	#appendLogSignal(const QString &) : void
	#run() : void
	+setListenFlag(bool flag) : void
	#startAccept() : void
	+stop() : void
}


class NodeInfo {
	+NodeInfo(byte mac_address, address ip_address, uint16_t port, shared_ptr<boost::asio::ip::tcp::socket> socket)
	+NodeInfo(NodeInfo&& node)
	+NodeInfo(const NodeInfo& node)
	+operator=(NodeInfo&& node) : NodeInfo&
	+operator=(const NodeInfo& node) : NodeInfo&
	+getTime() : QTime
	+time_ : QTime
	+ip_address_ : address
	+isSend() : bool
	+is_send_ : bool
	+mac_address_ : byte
	+getIP() : ip_t
	+getMac() : mac_t
	+getPort() : port_t
	-mutex_ : shared_mutex
	+port_ : uint16_t
	+setIP(address ip_address) : void
	+setMac(byte mac_address) : void
	+setPort(uint16_t port) : void
	+setSend(bool is_send) : void
	+setTime(QTime time) : void
	+socket_ : weak_ptr<boost::asio::ip::tcp::socket>
}


class NodeStatus {
	+NodeStatus()
	+addNode(NodeInfo&& node) : NodeInfo&
	+getNode(mac_t mac_address) : NodeInfo&
	-lastsend_ : QTime
	+isConflicting(mac_t mac_address_src, mac_t mac_conflict, bool& send) : bool
	-lastmac_ : mac_t
	-list_mutex_ : shared_mutex
	-mutex_ : shared_mutex
	-nodes_ : std::list<NodeInfo>
	+getNodes() : std::list<NodeInfo>&
	-lastsend_list_ : std::list<std::tuple<QTime, mac_t, bool>>
	+addLastSend(QTime lastsend, mac_t lastmac) : void
	+removeNode(mac_t mac_address) : void
}


class Process_AP {
	+Process_AP(int& argc, char** argv)
	+~Process_AP()
	-window_ : Window_AP
	-ip_address_ : address
	-listen_thread_ : std::unique_ptr<ListenThread_AP>
	-port_ : uint16_t
}


class Process_Node {
	-~Process_Node()
	-frontQueue() : DataWarper&
	-gettime() : QTime
	-transform_time_ : QTime
	-thread_receive_ : ThreadReceive_Node*
	-thread_send_ : ThreadSend_Node*
	-window_ : Window_Node
	-address_current_ : address
	-address_server_ : address
	+connected_ : bool
	-isQueueEmpty() : bool
	-mac_current_ : byte
	-buffer : char
	-backoff_time_ : int
	-getstatus() : int
	-io_context_ : io_context
	-queue_ : queue<DataWarper>
	-opinion_ : reuse_address
	-queue_lock_ : shared_mutex
	-status_lock_ : shared_mutex
	-time_lock_ : shared_mutex
	-socket_client_ : shared_ptr<socket_t>
	-Process_Node(int& argc, char** argv) : signals : public :
	-{static} bufsize : static constexpr size_t
	-{static} max_thread : static constexpr std::size_t
	-status_ : status
	-backoff_counter_ : uint16_t
	-port_current_ : uint16_t
	-port_server_ : uint16_t
	-cleanQueue() : void
	-popQueue() : void
	-pushQueue(const DataWarper& data) : void
	-setstatus(status status) : void
	-settime(QTime time) : void
}


class ReceiveThread_AP {
	+ReceiveThread_AP(shared_ptr<socket_t> socket_server, shared_mutex log_mutex, shared_mutex status_mutex, NodeStatus& status, Window_AP& window, QObject* parent)
	+~ReceiveThread_AP()
	-status_ : NodeStatus&
	-window_ : Window_AP&
	-log_mutex_ : shared_mutex
	-status_mutex_ : shared_mutex
	-socket_server_ : shared_ptr<socket_t>
	#showStatusSignal(const NodeInfo &) : signals : void
	#appendLogSignal(const QString &) : void
	#messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void
	#run() : void
	-sendACK(byte mac_src, byte mac_dest) : void
	-sendAnnounce(byte sender, QTime send_time) : void
	-sendConflict(byte sender1, byte sender2) : void
	-showStatus(const NodeInfo& nodeinfo) : void
}


class ThreadReceive_Node {
	+ThreadReceive_Node(Process_Node& node, Window_Node& window, shared_ptr<socket_t> socket_client, io_context io_context, byte mac_current, QObject* parent)
	+~ThreadReceive_Node()
	-app_ : Process_Node&
	-window_ : Window_Node&
	-mac_current_ : byte
	-buffer : char
	-io_context_ : io_context
	-socket_client_ : shared_ptr<socket_t>
	+taskend() : signals : void
	+messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void
	-receiveHandler(const boost::system::error_code& ec, size_t bytes_transferred) : void
	#run() : void
	+setText(const QString &) : void
}


class ThreadSend_Node {
	+ThreadSend_Node(Window_Node& window, Process_Node& node, shared_ptr<socket_t> socket_client, byte mac_current, QObject* parent)
	+~ThreadSend_Node()
	-app_ : Process_Node&
	-window_ : Window_Node&
	+getSending() : bool
	-sending_ : bool
	-mac_current_ : byte
	-backoff_time_ : int
	-sending_lock_ : mutex
	-socket_client_ : shared_ptr<socket_t>
	+setText(const QString &) : signals : void
	-backoff_counter_ : uint16_t
	+messageBoxSignal(StandardButton (* ) ( QWidget*, const QString&, const QString&, QMessageBox::StandardButtons, QMessageBox::StandardButton ) func, QWidget*, const QString &, const QString &, QMessageBox::StandardButtons, QMessageBox::StandardButton) : void
	#run() : void
	+setSending(bool sending) : void
	+taskend() : void
}


class Window_AP {
	+Window_AP(QWidget* parent)
	+~Window_AP()
	+ui_ : Ui::UI_ap*
}


class Window_Node {
	+Window_Node(QWidget* parent)
	+~Window_Node()
	+ui_ : Ui::UI_node*
}


class ackFrameBodyPROTOBUF_FINAL {
	+ackFrameBody()
	+ackFrameBody(const ackFrameBody& from)
	+ackFrameBody(ackFrameBody&& from)
	#ackFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~ackFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+{static} default_instance() : ackFrameBody&
	+operator=(const ackFrameBody& from) : ackFrameBody&
	+operator=(ackFrameBody&& from) : ackFrameBody&
	+New() : ackFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : ackFrameBody* {query}
	+{static} internal_default_instance() : ackFrameBody*
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const ackFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(ackFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const ackFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(ackFrameBody* other) : void
	+UnsafeArenaSwap(ackFrameBody* other) : void
	+swap(ackFrameBody& a, ackFrameBody& b) : void
}


class announceFrameBodyPROTOBUF_FINAL {
	+announceFrameBody()
	+announceFrameBody(const announceFrameBody& from)
	+announceFrameBody(announceFrameBody&& from)
	#announceFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~announceFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_internal_nodesend() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_sendtime() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+nodesend() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-nodesend_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+sendtime() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-sendtime_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+{static} default_instance() : announceFrameBody&
	+operator=(const announceFrameBody& from) : announceFrameBody&
	+operator=(announceFrameBody&& from) : announceFrameBody&
	+New() : announceFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : announceFrameBody* {query}
	+{static} internal_default_instance() : announceFrameBody*
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const announceFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(announceFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const announceFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(announceFrameBody* other) : void
	+UnsafeArenaSwap(announceFrameBody* other) : void
	-_internal_set_nodesend(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_sendtime(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_nodesend() : void
	+clear_sendtime() : void
	+set_nodesend(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_sendtime(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(announceFrameBody& a, announceFrameBody& b) : void
}


class conflictFrameBodyPROTOBUF_FINAL {
	+conflictFrameBody()
	+conflictFrameBody(const conflictFrameBody& from)
	+conflictFrameBody(conflictFrameBody&& from)
	#conflictFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~conflictFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_internal_nodesend1() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_nodesend2() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+nodesend1() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-nodesend1_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+nodesend2() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-nodesend2_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} default_instance() : conflictFrameBody&
	+operator=(const conflictFrameBody& from) : conflictFrameBody&
	+operator=(conflictFrameBody&& from) : conflictFrameBody&
	+New() : conflictFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : conflictFrameBody* {query}
	+{static} internal_default_instance() : conflictFrameBody*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const conflictFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(conflictFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const conflictFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(conflictFrameBody* other) : void
	+UnsafeArenaSwap(conflictFrameBody* other) : void
	-_internal_set_nodesend1(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_nodesend2(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_nodesend1() : void
	+clear_nodesend2() : void
	+set_nodesend1(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_nodesend2(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(conflictFrameBody& a, conflictFrameBody& b) : void
}


class dataFrameBodyPROTOBUF_FINAL {
	+GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for" " string fields are deprecated and will be removed in a" " future release." ) std::string* unsafe_arena_release_data ()
	+GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for" " string fields are deprecated and will be removed in a" " future release." ) void unsafe_arena_set_allocated_data ( std::string* data)
	+dataFrameBody()
	+dataFrameBody(const dataFrameBody& from)
	+dataFrameBody(dataFrameBody&& from)
	#dataFrameBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~dataFrameBody()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-data_ : ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr
	-_internal_length() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_timelast() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+length() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-length_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+timelast() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-timelast_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	+{static} default_instance() : dataFrameBody&
	+operator=(const dataFrameBody& from) : dataFrameBody&
	+operator=(dataFrameBody&& from) : dataFrameBody&
	+New() : dataFrameBody* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : dataFrameBody* {query}
	+{static} internal_default_instance() : dataFrameBody*
	- : friend struct::TableStruct_DataWarper_2eproto
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-_internal_data() : std::string& {query}
	+data() : std::string& {query}
	-_internal_mutable_data() : std::string*
	+mutable_data() : std::string*
	+release_data() : std::string*
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const dataFrameBody& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(dataFrameBody* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const dataFrameBody& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(dataFrameBody* other) : void
	+UnsafeArenaSwap(dataFrameBody* other) : void
	-_internal_set_data(const std::string& value) : void
	-_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_timelast(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_data() : void
	+clear_length() : void
	+clear_timelast() : void
	+set_allocated_data(std::string* data) : void
	+set_data(const std::string& value) : void
	+set_data(std::string&& value) : void
	+set_data(const char* value) : void
	+set_data(const void* value, size_t size) : void
	+set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_timelast(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(dataFrameBody& a, dataFrameBody& b) : void
}


class headerPROTOBUF_FINAL {
	+header()
	+header(const header& from)
	+header(header&& from)
	#header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
	+~header()
	+GetMetadata() : ::PROTOBUF_NAMESPACE_ID::Metadata {query}
	-_internal_destmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-_internal_srcmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	+destmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-destmac_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+srcmac() : ::PROTOBUF_NAMESPACE_ID::uint32 {query}
	-srcmac_ : ::PROTOBUF_NAMESPACE_ID::uint32
	+_InternalSerialize(::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) : ::PROTOBUF_NAMESPACE_ID::uint8* {query}
	+Clear() : PROTOBUF_ATTRIBUTE_REINITIALIZES void
	+IsInitialized() : bool {query}
	+_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) : char*
	+{static} GetDescriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} descriptor() : const::PROTOBUF_NAMESPACE_ID::Descriptor*
	+{static} GetReflection() : const::PROTOBUF_NAMESPACE_ID::Reflection*
	- : friend struct::TableStruct_DataWarper_2eproto
	+{static} default_instance() : header&
	+operator=(const header& from) : header&
	+operator=(header&& from) : header&
	+New() : header* {query}
	+New(::PROTOBUF_NAMESPACE_ID::Arena* arena) : header* {query}
	+{static} internal_default_instance() : header*
	+GetCachedSize() : int {query}
	-_cached_size_ : mutable::PROTOBUF_NAMESPACE_ID::internal::CachedSize
	+ByteSizeLong() : size_t {query}
	+{static} kIndexInFileMessages : static constexpr int
	-GetMetadataStatic() : static::PROTOBUF_NAMESPACE_ID::Metadata
	-FullMessageName() : static::PROTOBUF_NAMESPACE_ID::StringPiece
	-{static} ArenaDtor(void* object) : void
	+CopyFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+CopyFrom(const header& from) : void
	+{static} InitAsDefaultInstance() : void
	-InternalSwap(header* other) : void
	+MergeFrom(const::PROTOBUF_NAMESPACE_ID::Message& from) : void
	+MergeFrom(const header& from) : void
	-RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) : void
	-SetCachedSize(int size) : void {query}
	-SharedCtor() : void
	-SharedDtor() : void
	+Swap(header* other) : void
	+UnsafeArenaSwap(header* other) : void
	-_internal_set_destmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	-_internal_set_srcmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+clear_destmac() : void
	+clear_srcmac() : void
	+set_destmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+set_srcmac(::PROTOBUF_NAMESPACE_ID::uint32 value) : void
	+swap(header& a, header& b) : void
}


enum DataWarperPROTOBUF_FINAL::BodyCase {
	BODY_NOT_SET
	kAckFrameBody
	kAnnounceFrameBody
	kConflictFrameBody
	kDataFrameBody
}


enum DataWarperPROTOBUF_FINAL::empty {
	kAckFrameBodyFieldNumber
	kAnnounceFrameBodyFieldNumber
	kConflictFrameBodyFieldNumber
	kDataFrameBodyFieldNumber
	kHeaderFieldNumber
	kTypeFieldNumber
}


enum announceFrameBodyPROTOBUF_FINAL::empty {
	kNodeSendFieldNumber
	kSendTimeFieldNumber
}


enum conflictFrameBodyPROTOBUF_FINAL::empty {
	kNodeSend1FieldNumber
	kNodeSend2FieldNumber
}


enum dataFrameBodyPROTOBUF_FINAL::empty {
	kDataFieldNumber
	kLengthFieldNumber
	kTimeLastFieldNumber
}


enum headerPROTOBUF_FINAL::empty {
	kDestMacFieldNumber
	kSrcMacFieldNumber
}


enum status {
	busy
	conflict
	free
}


class DataWarperPROTOBUF_FINAL::BodyUnion {
	+BodyUnion()
	+ackframebody_ : ::ackFrameBody*
	+announceframebody_ : ::announceFrameBody*
	+conflictframebody_ : ::conflictFrameBody*
	+dataframebody_ : ::dataFrameBody*
}










.ListenThread_AP *- - .NodeStatus


.ListenThread_AP o- - .ReceiveThread_AP


.ListenThread_AP *- - .Window_AP


.NodeStatus *- - .NodeInfo


.Process_AP *- - .ListenThread_AP


.Process_AP *- - .Window_AP


.Process_Node o- - .ThreadReceive_Node


.Process_Node o- - .ThreadSend_Node


.Process_Node *- - .Window_Node


.Process_Node *- - .status


.ReceiveThread_AP *- - .NodeStatus


.ReceiveThread_AP *- - .Window_AP


.ThreadReceive_Node *- - .Process_Node


.ThreadReceive_Node *- - .Window_Node


.ThreadSend_Node *- - .Process_Node


.ThreadSend_Node *- - .Window_Node







.DataWarperPROTOBUF_FINAL +- - .DataWarperPROTOBUF_FINAL::BodyCase


.DataWarperPROTOBUF_FINAL +- - .DataWarperPROTOBUF_FINAL::BodyUnion


.DataWarperPROTOBUF_FINAL +- - .DataWarperPROTOBUF_FINAL::empty


.announceFrameBodyPROTOBUF_FINAL +- - .announceFrameBodyPROTOBUF_FINAL::empty


.conflictFrameBodyPROTOBUF_FINAL +- - .conflictFrameBodyPROTOBUF_FINAL::empty


.dataFrameBodyPROTOBUF_FINAL +- - .dataFrameBodyPROTOBUF_FINAL::empty


.headerPROTOBUF_FINAL +- - .headerPROTOBUF_FINAL::empty




@enduml

PlantUML version 1.2022.7(Tue Aug 23 01:01:30 CST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: en
Country: null
--></g></svg>